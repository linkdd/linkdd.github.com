<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom" xmlns:wfw="http://wellformedweb.org/CommentAPI/">
  <id>tag:linuxfr.org,2005:/users/linkdd</id>
  <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd"/>
  <link rel="self" type="application/atom+xml" href="https://linuxfr.org/users/linkdd.atom"/>
  <title>LinuxFr.org : les contenus de David Delassus</title>
  <updated>2016-07-03T16:12:58+02:00</updated>
  <icon>/favicon.png</icon>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/36703</id>
    <published>2016-07-03T16:12:58+02:00</published>
    <updated>2016-07-03T21:06:31+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/generation-de-code-python-avec-grako"/>
    <title>Génération de code (Python) avec Grako</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/4.0/deed.fr</rights>
    <content type="html">&lt;h2 class="sommaire"&gt;Sommaire&lt;/h2&gt;
&lt;ul class="toc"&gt;
&lt;li&gt;&lt;a href="#besoin-initial-trouver-la-lib"&gt;Besoin initial, trouver la lib!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sqlparse-vs-grako"&gt;SQLParse VS Grako&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#g%C3%A9n%C3%A9rer-un-parseur"&gt;Générer un parseur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#utiliser-le-parseur"&gt;Utiliser le parseur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#analyse-s%C3%A9mantique"&gt;Analyse sémantique&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#m%C3%A9thode-1--notre-propre-classe"&gt;Méthode 1 : Notre propre classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#m%C3%A9thode-2--le-nodewalker"&gt;Méthode 2 : Le NodeWalker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Depuis quelques jours, je découvre une lib Python, &lt;a href="https://bitbucket.org/apalala/grako"&gt;grako&lt;/a&gt;. Et je dois dire, elle est assez magique !&lt;/p&gt;
&lt;h2 id="besoin-initial-trouver-la-lib"&gt;Besoin initial, trouver la lib!&lt;/h2&gt;

&lt;p&gt;Le besoin initial s'est présenté au boulot : on doit écrire un DSL pour interroger un ensemble de systèmes fournissant chacun de la donnée à leurs manières.&lt;/p&gt;

&lt;p&gt;La première chose faite, c'est d'écrire la grammaire &lt;a href="https://fr.wikipedia.org/wiki/Extended_Backus-Naur_Form"&gt;eBNF&lt;/a&gt; de ce DSL. Histoire de prévoir comment on va parser le bazar.&lt;/p&gt;

&lt;p&gt;La seconde chose faite, et c'est devenu un réflexe maintenant quand je code en Python, est de chercher si ce que je veux faire n'existe pas déjà (je n'aime pas réinventer la roue). C'est la que je tombe sur &lt;a href="https://github.com/andialbrecht/sqlparse"&gt;sqlparse&lt;/a&gt; et &lt;strong&gt;Grako&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="sqlparse-vs-grako"&gt;SQLParse VS Grako&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SQLParse&lt;/strong&gt; permet de parser une requête SQL et de retourner une liste de &lt;em&gt;token&lt;/em&gt;, à nous de faire l'analyse sémantique et de donner du sens à l'ensemble. Bien mais limité par rapport au DSL que l'on a écrit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grako&lt;/strong&gt; permet de parser une grammaire &lt;em&gt;eBNF&lt;/em&gt; (qu'ils ont étendu à leur sauce), et de générer le code d'un parseur qui va retourner un AST (&lt;strong&gt;A&lt;/strong&gt;bstract &lt;strong&gt;S&lt;/strong&gt;yntax &lt;strong&gt;T&lt;/strong&gt;ree) représentant le texte parsé.&lt;/p&gt;

&lt;p&gt;Au premier abord, &lt;strong&gt;Grako&lt;/strong&gt; est plus souple, mais ça ne s'arrête pas là!&lt;/p&gt;

&lt;p&gt;Elle fournit également des outils pour faire l'analyse sémantique. Deux en fait, mais d'abord voyons comment générer notre parseur.&lt;/p&gt;
&lt;h2 id="générer-un-parseur"&gt;Générer un parseur&lt;/h2&gt;

&lt;p&gt;L'exemple simple est d'écrire une calculatrice, la grammaire (simplifiée) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expression = ("(" contenu_expression ")") | contenu_expression ;
contenu_expression = multiplication | division | addition | soustraction | terme ;
addition = (expression | terme) "+" (terme | expression) ;
soustraction = (expression | terme) "-" (terme | expression) ;
multiplication = (expression | terme) "*" (terme | expression) ;
division = (expression | terme) "/" (terme | expression) ;
terme = [ "-" | "+" ] { chiffre }+ [ "." { chiffre }+ ] ;
chiffre = /[0-9]/ ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il existe un outil en ligne de commande pour générer le code, mais ici ce qui nous intéresse c'est de le faire directement en Python.&lt;br&gt;
Donc en zieutant le code de cet outil en ligne de commande on obtient :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;grako.parser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GrakoGrammarGenerator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;grako.codegen&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pythoncg&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grammar.bnf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GrakoGrammarGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Math'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pythoncg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La variable code contient ici le code généré, on va trouver ainsi la définition de notre parseur : &lt;code&gt;MathParser&lt;/code&gt;.&lt;br&gt;
De mon côté, j'ai choisi de créer un module Python dynamiquement, afin d'avoir le parseur généré complètement au runtime :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;six&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exec_&lt;/span&gt;  &lt;span class="c"&gt;# compatibilité python2 et python3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'math_parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'math_parser'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et je peux désormais accéder à &lt;code&gt;module.MathParser&lt;/code&gt; !&lt;/p&gt;
&lt;h2 id="utiliser-le-parseur"&gt;Utiliser le parseur&lt;/h2&gt;

&lt;p&gt;Si j'essaye de parser une expression mathématique en l'état :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MathParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'45 + 98 / (76 * 2)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'expression'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J'obtiens un AST pas très exploitable :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[['4', '5'], '+', ['9', '8'], '/', '(', [['7', '6'], '*', ['2']], ')']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heureusement, &lt;strong&gt;Grako&lt;/strong&gt; étend la syntaxe de la grammaire et permet de nommer les différents patterns :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expression = ("(" contenu_expression ")") | contenu_expression ;
contenu_expression = multiplication | division | addition | soustraction | terme ;
addition = left:(expression | terme) op:"+" right:(terme | expression) ;
soustraction = left:(expression | terme) op:"-" right:(terme | expression) ;
multiplication = left:(expression | terme) op:"*" right:(terme | expression) ;
division = left:(expression | terme) op:"/" right:(terme | expression) ;
terme = value:([ "-" | "+" ] { chiffre }+ [ "." { chiffre }+ ]) ;
chiffre = /[0-9]/ ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cela donne comme résultat :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AST({'left': AST({'left': AST({'value': ['4', '5']}), 'right': AST({'value': ['9', '8']}), 'op': '+'}), 'right': ['(', AST({'left': AST({'value': ['7', '6']}), 'right': AST({'value': ['2']}), 'op': '*'}), ')'], 'op': '/'})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et avec un petit coup de &lt;code&gt;json.dumps(model, indent=4)&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"5"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"8"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;"7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"6"&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;"2"&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;")"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les choses s'améliorent nettement, on voit quand même que la priorité des opérateurs n'est pas réellement respectée, c'est que la grammaire n'est pas bonne, en la corrigeant :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expression = addition | soustraction | terme ;&lt;br&gt;
addition = left:terme op:"+" right:expression ;&lt;br&gt;
soustraction = left:terme op:"-" right:expression ;&lt;br&gt;
terme = multiplication | division | facteur ;&lt;br&gt;
multiplication = left:facteur op:"*" right:terme ;&lt;br&gt;
division = left:facteur op:"/" right:terme ;&lt;br&gt;
facteur = ("(" expression ")") | nombre ;&lt;br&gt;
nombre = value:([ "-" | "+" ] { chiffre }+ [ "." { chiffre }+ ]) ;&lt;br&gt;
chiffre = /[0-9]/ ;&lt;br&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On obtient :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AST({'left': AST({'value': ['4', '5']}), 'op': '+', 'right': AST({'left': AST({'value': ['9', '8']}), 'op': '/', 'right': ['(', AST({'left': AST({'value': ['7', '6']}), 'op': '*', 'right': AST({'value': ['2']})}), ')']})})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En JSON :&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"5"&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;"9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"8"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="s2"&gt;"7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;"6"&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="s2"&gt;"2"&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;")"&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et voilà, problème corrigé, sans modifier une ligne de code.&lt;/p&gt;
&lt;h2 id="analyse-sémantique"&gt;Analyse sémantique&lt;/h2&gt;
&lt;h3 id="méthode-1--notre-propre-classe"&gt;Méthode 1 : Notre propre classe&lt;/h3&gt;

&lt;p&gt;Le constructeur de notre parser peut prendre en paramètre une instance de classe qui va s'occuper de faire l'analyse :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MathParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semantics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MySemantics&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette classe va avoir une méthode par règle, ces méthodes seront appelées dès que les règles seront rencontrées, par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySemantics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce qui aura pour résultat :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AST({'op': '+', 'right': AST({'op': '/', 'right': ['(', AST({'op': '*', 'right': 2.0, 'left': 76.0}), ')'], 'left': 98.0}), 'left': 45.0})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et :&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;45.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;98.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"("&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;76.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;"right"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;")"&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si on ajoute l'évaluation des expressions et des facteurs :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MySemantics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;facteur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# on ignore les parenthèses&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'{0} {1} {2}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On obtient le résultat de notre calcul, que l'on peut vérifier :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MathParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semantics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MySemantics&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'45 + 98 / (76 * 2)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'expression'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour résumer, on a : une grammaire, une classe sémantique liée à notre grammaire.&lt;/p&gt;
&lt;h3 id="méthode-2--le-nodewalker"&gt;Méthode 2 : Le NodeWalker&lt;/h3&gt;

&lt;p&gt;La seconde méthode repose sur le parcours de l'AST après que ce dernier ait été produit avec une classe sémantique particulière :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;grako.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelBuilderSemantics&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MathParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semantics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ModelBuilderSemantics&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'45 + 98 / (76 * 2)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'expression'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La classe &lt;code&gt;grako.model.NodeWalker&lt;/code&gt; va permettre de parcourir ce &lt;code&gt;model&lt;/code&gt;, il convient donc de la surclasser :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;grako.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NodeWalker&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWalker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NodeWalker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_ExpressionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWalker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le &lt;code&gt;NodeWalker&lt;/code&gt; va essayer de trouver une méthode nommée &lt;code&gt;walk_&amp;lt;nom de la règle&amp;gt;&lt;/code&gt;, or actuellement, aucune de nos règles n'ont de nom, corrigeons cela :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expression::ExpressionNode = value:(addition | soustraction | terme) ;
addition::AdditionNode = left:terme op:"+" right:expression ;
soustraction::SoustractionNode = left:terme op:"-" right:expression ;
terme::TermeNode = value:(multiplication | division | facteur) ;
multiplication::MultiplicationNode = left:facteur op:"*" right:terme ;
division::DivisionNode = left:facteur op:"/" right:terme ;
facteur::FacteurNode = value:("(" expression ")") | value:nombre ;
nombre::NombreNode = value:([ "-" | "+" ] { chiffre }+ [ "." { chiffre }+ ]) ;
chiffre = /[0-9]/ ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous passe le gros JSON produit cette fois-ci, mais on a tout de suite beaucoup d'informations sur comment a été parsée notre expression.&lt;/p&gt;

&lt;p&gt;Le défaut du &lt;code&gt;NodeWalker&lt;/code&gt;, c'est que dès qu'il trouve une règle, il s'arrête là, ici notre méthode &lt;code&gt;walk_ExpressionNode&lt;/code&gt; n'a été appelée que pour le node racine, pas pour les noeuds enfants.&lt;/p&gt;

&lt;p&gt;Pour remédier à cela, on va plutôt utiliser une classe dérivée de &lt;code&gt;NodeWalker&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;grako.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DepthFirstWalker&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWalker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DepthFirstWalker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_ExpressionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# ici, children_retvals est une liste contenant la valeur de retour des méthodes walk_&amp;lt;nodename&amp;gt; des noeuds enfants&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette fois ci, le JSON résultant est encore plus gros, étant donné qu'il parcourt en profondeur.&lt;/p&gt;

&lt;p&gt;Lors du parcours, on peut ajouter des valeurs aux noeuds, ce qui est pratique lorsque les noeuds parents vont effectuer leurs traitements.&lt;/p&gt;

&lt;p&gt;Cette fois-ci, notre classe ressemble à cela :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyWalker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DepthFirstWalker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_NombreNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_FacteurNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_TermeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_AdditionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_SoustractionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_MultiplicationNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_DivisionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;walk_ExpressionNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;children_retvals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Les noeuds &lt;code&gt;AdditionNode&lt;/code&gt;, &lt;code&gt;SoustractionNode&lt;/code&gt;, &lt;code&gt;MultiplicationNode&lt;/code&gt; et &lt;code&gt;DivisionNode&lt;/code&gt; n'utilisent pas &lt;code&gt;children_retvals&lt;/code&gt; car l'ordre n'est pas forcément respecté lors du parcours de l'arbre (les noeuds sont des dictionnaires, donc les clés n'ont pas d'ordre).&lt;/p&gt;

&lt;p&gt;Et au final, on peut valider notre résultat à nouveau :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MathParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;semantics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ModelBuilderSemantics&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'45 + 98 / (76 * 2)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'expression'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyWalker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# la méthode walk retourne la valeur du dernier walk_&amp;lt;nodename&amp;gt; appelé&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encore une fois, une grammaire et une classe sémantique liée à cette grammaire, c'est tout.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Je vais avoir beaucoup recours à cette librairie, tellement elle est simple à utiliser. Le seul inconvénient reste que la génération du code prend du temps (pour une grammaire complexe, ça augmente vite).&lt;/p&gt;

&lt;p&gt;Il faut donc faire attention a ce qu'on ne le fasse qu'une seule fois au lancement de l'application.&lt;/p&gt;

&lt;p&gt;Malgré cela, elle répond parfaitement à pas mal de besoins. Beau travail messieurs les devs de &lt;strong&gt;Grako&lt;/strong&gt; &amp;lt;3&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/generation-de-code-python-avec-grako.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/generation-de-code-python-avec-grako#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="python"/>
    <category term="bnf"/>
    <wfw:commentRss>http://linuxfr.org/nodes/109485/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:News/37085</id>
    <published>2016-02-07T09:41:56+01:00</published>
    <updated>2016-02-07T09:41:56+01:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/news/presentation-technique-de-canopsis"/>
    <title>Présentation technique de Canopsis</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/4.0/deed.fr</rights>
    <content type="html">&lt;div&gt;&lt;p&gt;Supervision et visualisation des données : des domaines de l'informatique qui nous permettent de surveiller, analyser une infra, des données afin de comprendre et éventuellement prédire des dysfonctionnements.&lt;/p&gt;

&lt;p&gt;De nombreux outils existent et excellent dans chacune de ces tâches. Les accorder ensemble afin d'unifier l'information permet ainsi de faciliter la prise de décision.&lt;/p&gt;

&lt;p&gt;C'est ce que l'on appelle &lt;strong&gt;l'hypervision&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Canopsis se veut une solution d'hypervision (on évite l'appellation &lt;em&gt;hyperviseur&lt;/em&gt; qui reste dans le langage courant spécifique à la virtualisation). Solution open-source sous licence AGPL3 développée par la société française &lt;a href="http://capensis.fr"&gt;Capensis&lt;/a&gt;, elle se veut simple d'utilisation, et suffisamment souple pour répondre à un maximum de besoin.&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;lien n°1 : &lt;a title="https://git.canopsis.net/explore" hreflang="fr" href="http://linuxfr.org/redirect/96352"&gt;Gitlab de Canopsis&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°2 : &lt;a title="https://capensis.fr" hreflang="fr" href="http://linuxfr.org/redirect/96353"&gt;Capensis&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°3 : &lt;a title="http://www-igm.univ-mlv.fr/~dr/XPOSE2010/Hypervision/Hyperviseur.html" hreflang="fr" href="http://linuxfr.org/redirect/96354"&gt;Présentation d&amp;#39;un hyperviseur&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°4 : &lt;a title="http://www.informatique-securite.net/hypervision-supervision/" hreflang="fr" href="http://linuxfr.org/redirect/96355"&gt;Hypervision - Piloter votre supervision&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°5 : &lt;a title="http://wiki.monitoring-fr.org/hypervision/start" hreflang="fr" href="http://linuxfr.org/redirect/96356"&gt;Hypervision sur monitoring-fr&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2 class="sommaire"&gt;Sommaire&lt;/h2&gt;
&lt;ul class="toc"&gt;
&lt;li&gt;&lt;a href="#la-probl%C3%A9matique"&gt;La problématique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#objectif--la-solution"&gt;Objectif : la solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#%C3%89tape-1--les-connecteurs"&gt;Étape 1 : les connecteurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%C3%89tape-2--le-bus-de-donn%C3%A9es-et-les-moteurs"&gt;Étape 2 : le bus de données et les moteurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#%C3%89tape-3--les-sch%C3%A9mas"&gt;Étape 3 : les schémas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%C3%89tape-4--g%C3%A9rer-et-servir-la-donn%C3%A9e"&gt;Étape 4 : gérer et servir la donnée&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-les-managers"&gt;A. Les managers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b-les-webservices"&gt;B. Les webservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#%C3%89tape-5--lapplication-web"&gt;Étape 5 : l'application web&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-les-briques"&gt;A. Les briques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b-les-composants"&gt;B. Les composants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c-les-renderers%C3%A9diteurs"&gt;C. Les renderers/éditeurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#d-les-widgets"&gt;D. Les widgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#e-les-mixins"&gt;E. Les mixins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f-les-vues"&gt;F. Les vues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#le-bac-%C3%A0-%C3%A9v%C3%A9nements"&gt;Le bac à événements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#s%C3%A9lecteur-et-widget-m%C3%A9t%C3%A9o--simplifier-la-supervision"&gt;Sélecteur et widget météo : simplifier la supervision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monitoring-et-s%C3%A9ries"&gt;Monitoring et séries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#les-t%C3%A2ches-ordonnanc%C3%A9es-et-les-notifications"&gt;Les tâches ordonnancées et les notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id="la-problématique"&gt;La problématique&lt;/h2&gt;

&lt;p&gt;Dans une infra hétérogène, on dispose de nombreuses sources d'information :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;côté supervision, on peut avoir un mélange de :

&lt;ul&gt;
&lt;li&gt;Nagios/Icinga&lt;/li&gt;
&lt;li&gt;Centreon&lt;/li&gt;
&lt;li&gt;Shinken&lt;/li&gt;
&lt;li&gt;HPOV&lt;/li&gt;
&lt;li&gt;Zabbix&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;côté récolte de données, on peut avoir :

&lt;ul&gt;
&lt;li&gt;CollectD&lt;/li&gt;
&lt;li&gt;Logstash&lt;/li&gt;
&lt;li&gt;Munin&lt;/li&gt;
&lt;li&gt;Telegraf (de la pile &lt;a href="https://influxdata.com/"&gt;TICK&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ou encore :

&lt;ul&gt;
&lt;li&gt;des logs&lt;/li&gt;
&lt;li&gt;des données stockées en base de données&lt;/li&gt;
&lt;li&gt;un résultat de tests unitaires et fonctionnels (jMeter, Sikuli…)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;La mise en place d'un accès à l'ensemble de ces informations peut être fastidieuse, et dans la plupart des cas, l'utilisateur (l'administrateur technique et/ou fonctionnel) devra accéder à plusieurs interfaces et maîtriser plusieurs outils.&lt;/p&gt;

&lt;p&gt;Cela empêche d'avoir une vue d'ensemble cohérente et rend difficile l'anticipation ainsi que la prise de décision.&lt;/p&gt;
&lt;h2 id="objectif--la-solution"&gt;Objectif : la solution&lt;/h2&gt;

&lt;p&gt;C'est là que Canopsis intervient.&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/687474703a2f2f7777772e63616e6f707369732e636f6d2f77702d636f6e74656e742f7468656d65732f63616e6f707369732f696d616765732f736368656d612e706e67/schema.png" alt="Schéma fonctionnel" title="Source : http://www.canopsis.com/wp-content/themes/canopsis/images/schema.png"&gt;&lt;/p&gt;
&lt;h3 id="Étape-1--les-connecteurs"&gt;Étape 1 : les connecteurs&lt;/h3&gt;

&lt;p&gt;Dans un premier temps, nous devons récupérer les informations produites par cet ensemble hétérogène.&lt;/p&gt;

&lt;p&gt;Ainsi, pour chaque source de données, nous sommes en mesure de développer un &lt;strong&gt;connecteur&lt;/strong&gt;, capable d'extraire les informations voulues, et de les transmettre à Canopsis sous la forme &lt;strong&gt;d'événements&lt;/strong&gt; standardisés.&lt;/p&gt;

&lt;p&gt;Un certain nombre de connecteurs sont déjà disponibles sur le &lt;a href="https://git.canopsis.net/groups/canopsis-connectors"&gt;Gitlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le cas le plus simple est donc celui ci :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="c"&gt;# lib qui nous permet de nous connecter au bus de données (cf étape 2)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kombu&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;span class="c"&gt;# module qui sera utilisé pour envoyer les événements&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kombu.pools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;producers&lt;/span&gt;

&lt;span class="c"&gt;# construction de l'événement selon le standard Canopsis&lt;/span&gt;
&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="c"&gt;# émetteur de l'événement&lt;/span&gt;
    &lt;span class="s"&gt;"connector"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"myconnector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"connector_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"myconnector-instance0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# nature de l'événement&lt;/span&gt;
    &lt;span class="s"&gt;"event_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"check"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# source de l'événement&lt;/span&gt;
    &lt;span class="s"&gt;"source_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"component"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;hostname&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;job's name&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# données portées par l'événement&lt;/span&gt;
    &lt;span class="s"&gt;"state"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# 0 = INFO, 1 = MINOR, 2 = MAJOR, 3 = CRITICAL&lt;/span&gt;
    &lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;message&amp;gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# construction de la routing_key, qui sert à identifier l'événement et à le router&lt;/span&gt;
&lt;span class="n"&gt;routing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{0}.{1}.{2}.{3}.{4}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'connector'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'connector_name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'event_type'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'source_type'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'component'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'source_type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;routing_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"{0}.{1}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'resource'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Connexion&lt;/span&gt;
&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'amqp://cpsrabbit:canopsis@localhost:5672/canopsis'&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# Création de l'émetteur&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;producers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# Publication&lt;/span&gt;
        &lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;exchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'canopsis.events'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;routing_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;routing_key&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bien évidemment, du moment qu'un connecteur envoie ses événements, il peut être développé dans n'importe quel langage, c'est le cas du connecteur Nagios qui se présente comme un Nagios Event Broker, et est donc développé en C.&lt;/p&gt;
&lt;h3 id="Étape-2--le-bus-de-données-et-les-moteurs"&gt;Étape 2 : le bus de données et les moteurs&lt;/h3&gt;

&lt;p&gt;Les événements produits par les connecteurs sont transmis au bus de données de Canopsis, basé sur &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/687474703a2f2f69676d2e756e69762d6d6c762e66722f7e64722f58504f5345323031312f7261626269746d712f6c6f61645f62616c616e63696e672e706e67/load_balancing.png" alt="Schema RabbitMQ" title="Source : http://igm.univ-mlv.fr/~dr/XPOSE2011/rabbitmq/load_balancing.png"&gt;&lt;/p&gt;

&lt;p&gt;Source : &lt;a href="http://igm.univ-mlv.fr/%7Edr/XPOSE2011/rabbitmq/usages.html"&gt;http://igm.univ-mlv.fr/~dr/XPOSE2011/rabbitmq/usages.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ces événements vont être consommés par des &lt;em&gt;daemons&lt;/em&gt; que nous appelons &lt;strong&gt;moteurs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Leur but est simple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;traiter la donnée&lt;/li&gt;
&lt;li&gt;enregistrer les informations pertinentes en base de données&lt;/li&gt;
&lt;li&gt;transmettre, si nécessaire, l'événement à un ou plusieurs autres moteurs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Nous avons, par exemple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le moteur &lt;code&gt;event_filter&lt;/code&gt; qui se charge de filtrer/modifier les événements entrants&lt;/li&gt;
&lt;li&gt;le moteur &lt;code&gt;context&lt;/code&gt; qui se charge d'enregistrer les informations sur l'entité cible de l'événement (connecteur source, composant/ressource qui a produit l'événement…)&lt;/li&gt;
&lt;li&gt;le moteur &lt;code&gt;perfdata&lt;/code&gt; qui s'occupe d'historiser les données de performance (comme remontées par Nagios ou CollectD)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Comme pour les &lt;em&gt;connecteurs&lt;/em&gt;, les &lt;em&gt;moteurs&lt;/em&gt; peuvent être développés dans n'importe quel langage, bien que pour le moment nous les avons tous faits en Python.&lt;/p&gt;

&lt;p&gt;Étant un &lt;em&gt;daemon&lt;/em&gt;, un &lt;em&gt;moteur&lt;/em&gt; dispose de 2 fonctions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;une pour consommer les événements (dans un &lt;em&gt;thread&lt;/em&gt; à part)&lt;/li&gt;
&lt;li&gt;une pour exécuter une tâche régulièrement (recharger la configuration, envoyer des stats…)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ainsi que la configuration suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="k"&gt;[engine:myengine]&lt;/span&gt;

&lt;span class="c1"&gt;# chemin Python de la méthode de consommation&lt;/span&gt;
&lt;span class="na"&gt;event_processing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;canopsis.myfeature.process.event_processing&lt;/span&gt;
&lt;span class="c1"&gt;# chemin Python de la méthode exécutée régulièrement&lt;/span&gt;
&lt;span class="na"&gt;beat_processing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;canopsis.myfeature.process.beat_processing&lt;/span&gt;

&lt;span class="c1"&gt;# nom de l'exchange AMQP sur lequel écouter (par défaut: amq.direct)&lt;/span&gt;
&lt;span class="na"&gt;exchange_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;canopsis.event&lt;/span&gt;
&lt;span class="c1"&gt;# RK à consommer&lt;/span&gt;
&lt;span class="na"&gt;routing_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;nagios.#,shinken.#&lt;/span&gt;

&lt;span class="c1"&gt;# intervalle entre 2 exécutions du beat_processing (en secondes)&lt;/span&gt;
&lt;span class="na"&gt;beat_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;60&lt;/span&gt;

&lt;span class="c1"&gt;# liste des moteurs sur lesquels retransmettre l'événement reçu, possiblement modifié (par défaut: aucun)&lt;/span&gt;
&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;myengine2,myengine3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et donc l'implémentation se résume à :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;event_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# traiter l'événement&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beat_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# faire des choses&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="Étape-3--les-schémas"&gt;Étape 3 : les schémas&lt;/h3&gt;

&lt;p&gt;Toutes les données qui véhiculent dans le bus et qui sont sauvegardées en base sont munies de schémas les décrivant.&lt;/p&gt;

&lt;p&gt;Ces schémas servent à plusieurs choses :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;valider que la donnée est bien formatée&lt;/li&gt;
&lt;li&gt;décrire comment la donnée sera représentée&lt;/li&gt;
&lt;li&gt;décrire comment la donnée sera éditée&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ces deux derniers points permettent de générer une partie du code de l'UI (cf étape 5).&lt;/p&gt;

&lt;p&gt;À terme, ils serviront également à :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;décrire comment la donnée sera utilisée&lt;/li&gt;
&lt;li&gt;décrire comment la donnée pourra être transformée&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ce qui permettra de générer une partie du code backend (cf étape 4).&lt;/p&gt;

&lt;p&gt;Le formalisme qui permet d'écrire un schéma est actuellement inspiré du standard &lt;a href="http://json-schema.org/"&gt;JSON Schema&lt;/a&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MyData"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Schéma décrivant la donnée, comment l'afficher et l'éditer"&lt;/span&gt;

    &lt;span class="c1"&gt;// description de la donnée&lt;/span&gt;
    &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"properties"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"color"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"required"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="cm"&gt;/* comment la donnée sera affichée/éditée&lt;/span&gt;
&lt;span class="cm"&gt;             * le rôle 'color' :&lt;/span&gt;
&lt;span class="cm"&gt;             *   - affichera un carré de couleur lorsqu'on l'affichera&lt;/span&gt;
&lt;span class="cm"&gt;             *   - affichera un colorpicker lorsqu'on l'éditera&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="s2"&gt;"role"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="c1"&gt;// les champs suivants servent pour le formulaire&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Couleur de la donnée"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Tooltip d'aide"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;// les champs suivants aident à générer le formulaire d'édition&lt;/span&gt;
    &lt;span class="s2"&gt;"categories"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"General"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L'&lt;code&gt;id&lt;/code&gt; d'un schéma est construit de la manière suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mydata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mydata.mydata2&lt;/code&gt; : ici &lt;code&gt;mydata2&lt;/code&gt; hérite de &lt;code&gt;mydata&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;On obtient donc en base de données :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;id du schema&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"schema"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// le schéma à proprement parler&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="Étape-4--gérer-et-servir-la-donnée"&gt;Étape 4 : gérer et servir la donnée&lt;/h3&gt;

&lt;p&gt;Maintenant que nous avons la structure pour récupérer la donnée, et que nous sommes en mesure de la schématiser, il faut mettre en place les mécanismes permettant d'interagir avec et de la servir à l'UI.&lt;/p&gt;
&lt;h4 id="a-les-managers"&gt;A. Les managers&lt;/h4&gt;

&lt;p&gt;La gestion de la donnée est prise en charge par ce que l'on appelle les &lt;strong&gt;managers&lt;/strong&gt;. Pour bien comprendre son rôle, il faut plonger un peu dans le code.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;configurable&lt;/strong&gt; est un objet Python dont les propriétés sont définies par son fichier de configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.configuration.configurable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Configurable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.configuration.configurable.decorator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;conf_paths&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.configuration.configurable.decorator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_category&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.configuration.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Parameter&lt;/span&gt;


&lt;span class="n"&gt;CONF_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'myfeature/manager.conf'&lt;/span&gt;  &lt;span class="c"&gt;# {sys.prefix}/etc/{CONF_PATH}&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'MYFEATURE'&lt;/span&gt;
&lt;span class="c"&gt;# Définition du contenu de la catégorie&lt;/span&gt;
&lt;span class="n"&gt;CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c"&gt;# ajoute un fichier de configuration à lire par le configurable&lt;/span&gt;
&lt;span class="nd"&gt;@conf_paths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONF_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# permet de spécifier la catégorie de configuration depuis laquelle on peut lire les paramètres&lt;/span&gt;
&lt;span class="nd"&gt;@add_category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CATEGORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyFeatureManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configurable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ainsi, avec le fichier de configuration suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="k"&gt;[MYFEATURE]&lt;/span&gt;

&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;bar&lt;/span&gt;
&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ou :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"MYFEATURE"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En effet, le configurable va tester différents drivers, actuellement on dispose de INI et JSON mais il est envisageable d'avoir un driver MongoDB ou autre&lt;/p&gt;

&lt;p&gt;Lorsque l'on instanciera la classe, on obtiendra :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et à partir de cette classe &lt;code&gt;Configurable&lt;/code&gt; on va définir l'arbre d'héritage suivant :&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/68747470733a2f2f6c75742e696d2f684147434b6b50544c6e2f496a4e43675541764369486f7233696c/IjNCgUAvCiHor3il" alt="Diagramme Configurable" title="Source : https://lut.im/hAGCKkPTLn/IjNCgUAvCiHor3il"&gt;&lt;/p&gt;

&lt;p&gt;Un &lt;code&gt;ConfigurableRegistry&lt;/code&gt; permet de spécifier, dans un paramètre de configuration, un autre &lt;code&gt;Configurable&lt;/code&gt; à instancier :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="na"&gt;otherconfigurable_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;canopsis.myotherfeature.manager.MyOtherFeatureManager&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et on y accèdera, dans l'instance, de la manière suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'otherconfigurable'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;MyOtherFeatureManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le &lt;code&gt;MiddlewareRegistry&lt;/code&gt; fait de même pour les &lt;code&gt;Middleware&lt;/code&gt; (qui identifient un &lt;strong&gt;protocole&lt;/strong&gt; ainsi qu'un &lt;strong&gt;type de données&lt;/strong&gt;) :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="na"&gt;mymiddleware_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;protocol-datatype-datascope://&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De même que pour le &lt;code&gt;ConfigurableRegistry&lt;/code&gt;, on y accède de la manière suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'mymiddleware'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En général, un &lt;em&gt;manager&lt;/em&gt; sera un &lt;code&gt;MiddlewareRegistry&lt;/code&gt;, ce qui permettra de changer de techno utilisée, sans modifier le code :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="k"&gt;[MYFEATURE]&lt;/span&gt;

&lt;span class="na"&gt;mystorage_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mongodb-timed-mydata://&lt;/span&gt;
&lt;span class="c1"&gt;# mystorage_uri = influxdb-timed-mydata://&lt;/span&gt;
&lt;span class="na"&gt;mymanager_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;canopsis.myotherfeature.manager.MyOtherFeatureManager&lt;/span&gt;
&lt;span class="c1"&gt;# mymanager_value = canopsis.myotherfeature.manager2.MyOtherFeatureManager2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ce manager sera utilisé par le &lt;strong&gt;moteur&lt;/strong&gt; et le &lt;strong&gt;webservice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En reprenant l'exemple du moteur :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.common.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singleton_per_scope&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.myfeature.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;event_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# instancie la classe une seule fois par module&lt;/span&gt;
        &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;singleton_per_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# faire des choses avec l'événement et le manager&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;beat_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;singleton_per_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# faire des choses avec le manager&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="b-les-webservices"&gt;B. Les webservices&lt;/h4&gt;

&lt;p&gt;Afin de servir la donnée à l'UI, on dispose d'une application WSGI découpée en modules, que l'on appelle &lt;strong&gt;webservice&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ces derniers se trouvent dans le paquet Python &lt;code&gt;canopsis.webcore.services&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Et grâce au code suivant (à placer dans le &lt;code&gt;__init__.py&lt;/code&gt;), on peut avoir plusieurs paquets Python fournissant du code à cet emplacement :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkgutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;extend_path&lt;/span&gt;
&lt;span class="n"&gt;__path__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;extend_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__path__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bref, un &lt;em&gt;webservice&lt;/em&gt; s'écrit très simplement :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="c"&gt;# couche d'abstraction qui nous permettra de passer de Bottle à Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.common.ws&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.common.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singleton_per_scope&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.myfeature.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;


&lt;span class="c"&gt;# Sera appelé par l'application WSGI pour charger les routes HTTP&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ici `ws` désigne donc le webserver&lt;/span&gt;

    &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;singleton_per_scope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyFeatureManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# ici on créé la route /foo qui accepte la méthode GET&lt;/span&gt;
    &lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;

    &lt;span class="c"&gt;# l'API retournera :&lt;/span&gt;
    &lt;span class="c"&gt;# {&lt;/span&gt;
    &lt;span class="c"&gt;#     "total": 1,&lt;/span&gt;
    &lt;span class="c"&gt;#     "data": ["bar"],&lt;/span&gt;
    &lt;span class="c"&gt;#     "success": true&lt;/span&gt;
    &lt;span class="c"&gt;# }&lt;/span&gt;

    &lt;span class="c"&gt;# cette fois ci, on créé la route /bar/:baz&lt;/span&gt;
    &lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="Étape-5--lapplication-web"&gt;Étape 5 : l'application web&lt;/h3&gt;

&lt;p&gt;Côté &lt;em&gt;backend&lt;/em&gt;, on dispose désormais du nécessaire pour fournir à l'UI tout ce dont elle a besoin.&lt;br&gt;
Ainsi, nous avons également travaillé la modularité de cette UI, basée sur &lt;a href="http://emberjs.com"&gt;Ember&lt;/a&gt;, au maximum.&lt;/p&gt;
&lt;h4 id="a-les-briques"&gt;A. Les briques&lt;/h4&gt;

&lt;p&gt;Afin de répondre à cette problématique de modularité, nous avons mis en place un système de briques, permettant de sélectionner les fonctionnalités effectivement chargées.&lt;/p&gt;

&lt;p&gt;Concrètement, on peut voir une &lt;strong&gt;brique&lt;/strong&gt; comme étant un &lt;em&gt;addon&lt;/em&gt; apportant plusieurs fonctionnalités telles que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nouveaux éléments graphiques (&lt;em&gt;composants&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;nouveaux outils de rendus (&lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;renderers&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;nouveaux outils d'éditions (&lt;em&gt;éditors&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Pour construire une brique, il suffit de créer un paquet &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; avec le &lt;code&gt;package.json&lt;/code&gt; suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;nom de la brique&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;description de la brique&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// il s'agit du fichier principal de la brique, il pointera vers la version de dev ou minifiée&lt;/span&gt;
    &lt;span class="s2"&gt;"main"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"init.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"compile"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"rm -Rf tmp/build &amp;amp;&amp;amp; broccoli build tmp/build &amp;amp;&amp;amp; cp tmp/build . -RT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"lint"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"eslint src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"doc"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"./node_modules/canopsis-ui-toolbelt/scripts/buildDoc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"minify"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"node node_modules/canopsis-ui-toolbelt/scripts/minify.js"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"repository"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;url du dépôt&amp;gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;auteur&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"AGPL-3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^0.16.9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli-funnel"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^1.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli-merge-trees"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli-sourcemap-concat"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^1.1.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli-template"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^0.1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"broccoli-uglify-js"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^0.1.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// outil de gestion des briques Canopsis&lt;/span&gt;
        &lt;span class="s2"&gt;"canopsis-ui-toolbelt"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://git.canopsis.net/canopsis/canopsis-ui-toolbelt/repository/archive.tar.gz?ref=&amp;lt;branche git de canopsis-ui-toolbelt&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"jsdoc"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^3.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"pre-commit"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"^1.1.1"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"pre-commit"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"doc"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis, dans un dossier &lt;code&gt;src&lt;/code&gt; on placera le code source de la brique :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;components/mycomponent/component.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components/mycomponent/template.hbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderers/renderer-myrole.hbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;editors/editor-myrole.hbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;widgets/mywidget/controller.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;widgets/mywidget/mywidget.hbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mixins/mymixin.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;L'outil &lt;code&gt;canopsis-ui-toolbelt&lt;/code&gt; se charge de :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;récupérer récursivement tout le code JS dans le dossier &lt;code&gt;src&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;référencer le code JS dans le fichier &lt;code&gt;init.js&lt;/code&gt; qui représente la brique&lt;/li&gt;
&lt;li&gt;récupérer récursivement tout les templates (&lt;code&gt;*.hbs&lt;/code&gt;) dans le dossier &lt;code&gt;src&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;référencer les templates également dans le fichier &lt;code&gt;init.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;référencer les templates dans &lt;code&gt;Ember.TEMPLATES&lt;/code&gt; :

&lt;ul&gt;
&lt;li&gt;pour un composant, il est requis d'avoir le dossier &lt;code&gt;components/&amp;lt;mycomponent&amp;gt;&lt;/code&gt;, afin que le template soit reconnu comme étant un template de composant&lt;/li&gt;
&lt;li&gt;pour le reste, le nom du template dans &lt;em&gt;Ember&lt;/em&gt; sera le nom du fichier sans extension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;NB: Le découpage n'est donc obligatoire que pour les composants, le reste peut être mis en vrac dans &lt;code&gt;src&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Une fois que l'on a créé tout cela (ou récupéré le dépôt Git), on peut finaliser la brique :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install
$ npm run compile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chaque fichier source contiendra au moins un &lt;strong&gt;Ember Initializer&lt;/strong&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MyModule'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Dependency1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Dependency2'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Dependency1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookupFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'deptype:dependency1'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;Dependency2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookupFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'deptype:dependency2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// do stuff&lt;/span&gt;

        &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'modtype:mymodule'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* stuff */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cela permet ainsi de s'assurer du bon chargement de chaque module.&lt;/p&gt;

&lt;p&gt;Au final, pour installer une brique, il suffit de :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cloner le dépôt finalisé dans : &lt;code&gt;/opt/canopsis/var/www/canopsis&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;lancer la commande &lt;code&gt;webmodulemanager enable mybrick&lt;/code&gt; afin de l'activer au chargement de l'UI&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;L'ensemble des briques existantes (hormis celle par défaut livrées avec Canopsis) sont disponible &lt;a href="https://git.canopsis.net/groups/canopsis-ui-bricks"&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="b-les-composants"&gt;B. Les composants&lt;/h4&gt;

&lt;p&gt;Le composant, l'élément le plus basique de l'UI, sera utilisé par tout les autres éléments.&lt;br&gt;
Il s'agit simplement d'un composant &lt;em&gt;Ember&lt;/em&gt; avec un template à fournir.&lt;/p&gt;

&lt;p&gt;On définira notre composant dans &lt;code&gt;src/components/mycomponent/component.js&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MyComponent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// faire des choses&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// on implémente les actions, déclenchable depuis le template&lt;/span&gt;

                &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'component:component-mycomponent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et le template dans &lt;code&gt;src/components/mycomponent/template.hbs&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My awesome component&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Launch action&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="c-les-rendererséditeurs"&gt;C. Les renderers/éditeurs&lt;/h4&gt;

&lt;p&gt;Une fois nos composants définis, on est en mesure de les utiliser dans des &lt;strong&gt;renderers&lt;/strong&gt; ou des &lt;strong&gt;éditeurs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Le but de ces éléments est simple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lorsqu'on demande l'affichage d'une donnée avec le composant &lt;code&gt;renderer&lt;/code&gt; :

&lt;ul&gt;
&lt;li&gt;le champ &lt;code&gt;role&lt;/code&gt; du schéma JSON est également lu&lt;/li&gt;
&lt;li&gt;si un &lt;em&gt;renderer&lt;/em&gt; du même nom est trouvé, il est utilisé dans le template&lt;/li&gt;
&lt;li&gt;sinon, on affiche la donnée telle quelle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lorsqu'un formulaire d'édition est généré à partir du schéma JSON, en utilisant le composant &lt;code&gt;editor&lt;/code&gt; :

&lt;ul&gt;
&lt;li&gt;le champ &lt;code&gt;role&lt;/code&gt; est lu&lt;/li&gt;
&lt;li&gt;si un éditeur du même nom est trouvé, il est utilisé dans le formulaire&lt;/li&gt;
&lt;li&gt;sinon, on utilise l'éditeur par défaut&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Les &lt;em&gt;renderers&lt;/em&gt;/&lt;em&gt;éditeurs&lt;/em&gt; ne sont donc que de simple templates &lt;a href="https://github.com/tildeio/htmlbars"&gt;HTMLBars&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On aura le &lt;em&gt;renderer&lt;/em&gt; dans &lt;code&gt;src/renderers/renderer-myrole.hbs&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My rendered data: {{value}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

{{component-mycomponent}}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et l'&lt;em&gt;éditeur&lt;/em&gt; dans &lt;code&gt;src/editors/editor-myrole.hbs&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My data is being edited :&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{{input type="password" value=attr.value}}

{{component-mycomponent}}&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="d-les-widgets"&gt;D. Les widgets&lt;/h4&gt;

&lt;p&gt;Enfin, on aura les &lt;strong&gt;widgets&lt;/strong&gt;, qui seront en mesure d'utiliser &lt;em&gt;composants&lt;/em&gt; et&lt;br&gt;&lt;em&gt;renderers&lt;/em&gt; afin d'implémenter des outils de visualisation de données plus complexes.&lt;/p&gt;

&lt;p&gt;Un &lt;em&gt;widget&lt;/em&gt; est un &lt;strong&gt;MVC&lt;/strong&gt; complet :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on implémente un contrôleur&lt;/li&gt;
&lt;li&gt;on implémente des &lt;em&gt;mixins&lt;/em&gt; qui viendront s'appliquer à la vue&lt;/li&gt;
&lt;li&gt;on écrit un template&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ce qui donne :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'MyWidget'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'WidgetFactory'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;WidgetFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookupFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'factory:widget'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;widgetOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MyWidgetViewMixin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mixin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;didInsertElement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// faire des choses&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;willDestroyElement&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// faire des choses&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// actions de la vue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;


        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WidgetFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mywidget'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;viewMixins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="nx"&gt;MyWidgetViewMixin&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;

            &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// actions du contrôleur&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// faire des choses&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="nx"&gt;findItems&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// méthode appelée lors de la récupération des données pour le template&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;widgetOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'widget:mywidget'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ensuite, il est nécessaire de créer un schéma &lt;code&gt;widget.mywidget.json&lt;/code&gt; qui sera utilisé pour configurer le widget lors de son ajout dans une vue :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MyWidget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Schéma de configuration de MyWidget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s2"&gt;"metadata"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// icône dans le formulaire d'ajout de widget&lt;/span&gt;
        &lt;span class="s2"&gt;"icon"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"fa fa-cog"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="s2"&gt;"categories"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"General"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"properties"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// nom du champ dans le formulaire&lt;/span&gt;
            &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Foo field"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// tooltip dans le formulaire&lt;/span&gt;
            &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"role"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"myrole"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="e-les-mixins"&gt;E. Les mixins&lt;/h4&gt;

&lt;p&gt;Lorsque l'on a des fonctionnalités communes à plusieurs widgets (comme le &lt;code&gt;PeriodicRefresh&lt;/code&gt; qui actualise le widget régulièrement), il convient de factoriser le code en un &lt;strong&gt;mixin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ce dernier pourra être ajouté et configuré au &lt;em&gt;widget&lt;/em&gt; via l'UI, et ensuite appliquer la-dite configuration au contrôleur du widget :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'MyMixin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MixinFactory'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Mixin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookupFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'factory:mixin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MyMixin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Mixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mymixin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;mixinsOptionsReady&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mixinOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mixinOptions.mymixin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// faire des choses&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mixin:mymixin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyMixin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et il ne manque plus que le schéma &lt;code&gt;mixin.mymixin.json&lt;/code&gt; décrivant la configuration du &lt;em&gt;mixin&lt;/em&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"MyMixin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Schéma de configuration de MyMixin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s2"&gt;"metadata"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// description affiché dans l'UI&lt;/span&gt;
        &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Add stuff to widget"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="s2"&gt;"categories"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"General"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

    &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"properties"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Bar field"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"string"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="f-les-vues"&gt;F. Les vues&lt;/h4&gt;

&lt;p&gt;Tout les outils sont désormais à notre disposition pour construire nos &lt;em&gt;dashboards&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Donc si on résume :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;une &lt;strong&gt;vue&lt;/strong&gt; est composée de &lt;em&gt;widgets&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;un &lt;em&gt;widget&lt;/em&gt; est composé de &lt;em&gt;composants&lt;/em&gt; et de &lt;em&gt;mixins&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;L'UI fournit les outils qui permettent de construire ces vues, le résultat final est un document JSON stocké en base :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"id de ma vue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"description de ma vue"&lt;/span&gt;
    &lt;span class="s2"&gt;"crecord_name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nom de ma vue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"crecord_type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"view"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;user qui a créé la vue&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"enable"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"internal"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="c1"&gt;// le widget initial de la vue&lt;/span&gt;
    &lt;span class="s2"&gt;"containerwidget"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// identifiant du widget&lt;/span&gt;
        &lt;span class="s2"&gt;"xtype"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"widgetcontainer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"container title vbox"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// le widget "widgetcontainer" s'attend à avoir un champ "items"&lt;/span&gt;
        &lt;span class="s2"&gt;"items"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// le widget "widgetwrapper" sert à inclure des widgets dans un container pour les placer correctement&lt;/span&gt;
                &lt;span class="s2"&gt;"xtype"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"widgetwrapper"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"wrapper"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;// le widget encapsulé :&lt;/span&gt;
                &lt;span class="s2"&gt;"widget"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"xtype"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"mywidget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"My awesome widget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="c1"&gt;// configuration spécifique au widget&lt;/span&gt;
                    &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                    &lt;span class="c1"&gt;// mixins appliqués via l'UI :&lt;/span&gt;
                    &lt;span class="s2"&gt;"mixins"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"periodicrefresh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="c1"&gt;// paramètres du mixin&lt;/span&gt;
                            &lt;span class="s2"&gt;"refreshInterval"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"mymixin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="c1"&gt;// paramètres du mixin&lt;/span&gt;
                            &lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"baz"&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;// le container de base de la vue à un widget de layout par défaut&lt;/span&gt;
        &lt;span class="s2"&gt;"mixins"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"lightlayout"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La totalité de l'UI est générée à partir de ces vues JSON, et est donc complètement personnalisable.&lt;/p&gt;
&lt;h2 id="le-bac-à-événements"&gt;Le bac à événements&lt;/h2&gt;

&lt;p&gt;Parmi les vues par défaut qui sont livrées avec Canopsis, on trouve le &lt;strong&gt;Bac à événements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cette vue fournit un &lt;em&gt;dashboard&lt;/em&gt; de supervision commun, unifiant ainsi la totalité des superviseurs remontant des informations à Canopsis.&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/68747470733a2f2f6c75742e696d2f4e4f39435252754476492f325757494b674355726b364574593175/2WWIKgCUrk6EtY1u" alt="screenshot du bac à événements" title="Source : https://lut.im/NO9CRRuDvI/2WWIKgCUrk6EtY1u"&gt;&lt;/p&gt;

&lt;p&gt;Depuis ce bac, on voit apparaître les différentes alarmes avec comme informations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;leurs sources d'émission (le connecteur)&lt;/li&gt;
&lt;li&gt;leurs sources cible (composant/ressource, qui dans la plupart des cas correspond au couple &lt;em&gt;host&lt;/em&gt;/&lt;em&gt;service&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;le dernier message associé à un &lt;em&gt;check&lt;/em&gt; (Nagios, Shinken, Centreon, …)&lt;/li&gt;
&lt;li&gt;le statut de l'alarme associé au &lt;em&gt;check&lt;/em&gt; :

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Off&lt;/strong&gt; : aucune alarme n'est présente&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On Going&lt;/strong&gt; : un problème a été remonté et n'est toujours pas résolu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stealthy&lt;/strong&gt; : une alarme a été remontée et est immédiatement repassée OK (durée paramétrable)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flapping&lt;/strong&gt; : il y a eu X changements d'état en 1h sur l'alarme (durée et fréquence paramétrable)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cancelled&lt;/strong&gt; : l'alarme a été annulée par un utilisateur (pour éviter les faux-positifs)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;l'état du &lt;em&gt;check&lt;/em&gt; :

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;INFO&lt;/strong&gt; : tout va bien&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MINOR&lt;/strong&gt; : équivalent au &lt;em&gt;Warning&lt;/em&gt; de Nagios&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MAJOR&lt;/strong&gt; : équivalent au &lt;em&gt;Critical&lt;/em&gt; de Nagios&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CRITICAL&lt;/strong&gt; : les &lt;em&gt;Unknown&lt;/em&gt; de Nagios sont remontés en tant que tel, mais cela ne se limite pas à cette notion&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UNKNOWN&lt;/strong&gt; : état non pris en charge à l'heure actuelle, c'est tout ce qui est supérieur à &lt;em&gt;CRITICAL&lt;/em&gt; (&lt;code&gt;3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;la présence d'un acquittement et/ou d'un ticket :

&lt;ul&gt;
&lt;li&gt;les connecteurs pour Nagios, Shinken, etc… peuvent remonter les acquittements posés&lt;/li&gt;
&lt;li&gt;depuis Canopsis, on peut en poser manuellement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;la date du dernier changement d'état&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sur chaque alarme, on peut réaliser différentes actions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l'acquittement (permet de déverrouiller les autres actions), cela émettra le même événement qui serait remonté par un superviseur, soit un événement de type &lt;code&gt;ack&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;une suppression de l'acquittement, cela émettra un événement de type &lt;code&gt;ackremove&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;une annulation de l'alarme, cela émettra un événement de type &lt;code&gt;cancel&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;une fois l'alarme annulée, on peut annuler cette action, cela émettra un événement de type &lt;code&gt;uncancel&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;une déclaration de ticket :

&lt;ul&gt;
&lt;li&gt;cela émettra un événement de type &lt;code&gt;declareticket&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cet événement pourra être capturé par le moteur &lt;code&gt;event_filter&lt;/code&gt; pour déclencher un job (voir plus bas) qui communiquera le ticket à un outil tiers (par exemple &lt;a href="http://www.combodo.com/itop"&gt;iTop&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;une association de ticket existant :

&lt;ul&gt;
&lt;li&gt;cela émettra un événement de type &lt;code&gt;assocticket&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;on peut imaginer que le job qui communique la déclaration du ticket à l'outil tiers récupère le numéro du ticket nouvellement créé, et l'associe automatiquement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;une requalification de l'événement :

&lt;ul&gt;
&lt;li&gt;cela changera l'état du &lt;em&gt;check&lt;/em&gt; manuellement, et ce dernier gardera cet état jusqu'à la résolution de l'alarme&lt;/li&gt;
&lt;li&gt;cela émettra un événement de type &lt;code&gt;check&lt;/code&gt;, comme le superviseur&lt;/li&gt;
&lt;li&gt;la seule différence est la présence d'un champ &lt;code&gt;keep_state&lt;/code&gt; qui vaut &lt;code&gt;true&lt;/code&gt; dans l'événement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Toutes ces actions permettent ainsi d'unifier une supervision hétérogène, et l'administrateur (technique) ne devra utiliser/maîtriser qu'un seul outil.&lt;/p&gt;
&lt;h2 id="sélecteur-et-widget-météo--simplifier-la-supervision"&gt;Sélecteur et widget météo : simplifier la supervision&lt;/h2&gt;

&lt;p&gt;Lorsque l'on supervise une grosse infrastructure, les informations remontées via les &lt;em&gt;checks&lt;/em&gt; deviennent tout de suite beaucoup plus conséquentes. C'est pourquoi nous avons mis en place la possibilité d'agréger ces &lt;em&gt;checks&lt;/em&gt; afin d'avoir une visibilité plus simple sur l'infra.&lt;/p&gt;

&lt;p&gt;Cette agrégation se fait à l'aide des &lt;strong&gt;sélecteurs&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on créé un filtre d'événements&lt;/li&gt;
&lt;li&gt;on applique un algorithme à l'état de chaque &lt;em&gt;check&lt;/em&gt; qui matche le filtre (actuellement seul l'algo &lt;strong&gt;Worst State&lt;/strong&gt; est disponible)&lt;/li&gt;
&lt;li&gt;on produit un événement de type &lt;code&gt;selector&lt;/code&gt; qui contient :

&lt;ul&gt;
&lt;li&gt;l'état agrégé&lt;/li&gt;
&lt;li&gt;le champ &lt;code&gt;output&lt;/code&gt; qui est le rendu du template spécifié dans la configuration du sélecteur&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;si le sélecteur est configuré pour, on déclenche le calcul des &lt;strong&gt;SLA&lt;/strong&gt; :

&lt;ul&gt;
&lt;li&gt;sur une période de temps (spécifiée dans la configuration du sélecteur)&lt;/li&gt;
&lt;li&gt;on calcule le pourcentage de temps passé sur chaque état possible&lt;/li&gt;
&lt;li&gt;on produit une &lt;em&gt;métrique&lt;/em&gt; pour chacune de ces métriques, ainsi qu'un événement de type &lt;code&gt;sla&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;l'état remonté par l'événement correspond aux seuils de SLA configurés dans le sélecteur&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Le résultat est finalement affichable avec un widget &lt;strong&gt;weather&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/68747470733a2f2f6c75742e696d2f72466a387241725044672f383866507a4643305931354b35423030/88fPzFC0Y15K5B00" alt="screenshot widget weather" title="Source : https://lut.im/rFj8rArPDg/88fPzFC0Y15K5B00"&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: Le sélecteur peut afficher également des checks unitairement&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On peut ainsi noter les couleurs suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;vert&lt;/em&gt; : l'état du sélecteur est &lt;code&gt;INFO&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;jaune&lt;/em&gt; : l'état du sélecteur est &lt;code&gt;MINOR&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;orange&lt;/em&gt; : l'état du sélecteur est &lt;code&gt;MAJOR&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;rouge&lt;/em&gt; : l'état du sélecteur est &lt;code&gt;CRITICAL&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;violet&lt;/em&gt; : toutes les alarmes du sélecteur ont été acquittée&lt;/li&gt;
&lt;li&gt;la couleur du widget est celle du pire état des sélecteurs positionnés dans celui ci&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Un clic sur le sélecteur dans le widget nous redirigera sur le &lt;em&gt;Bac à événements&lt;/em&gt;, filtré avec le filtre du sélecteur.&lt;/p&gt;
&lt;h2 id="monitoring-et-séries"&gt;Monitoring et séries&lt;/h2&gt;

&lt;p&gt;Chaque connecteur, moteur, et sélecteur produisent des données de performances :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;temps d'exécution d'un &lt;em&gt;check&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;usage CPU/RAM/Disque&lt;/li&gt;
&lt;li&gt;temps moyen passé sur un événement&lt;/li&gt;
&lt;li&gt;nombre moyen d'événements par seconde&lt;/li&gt;
&lt;li&gt;donnée de SLA&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Tout cela est remonté dans Canopsis dans un événement via le champ &lt;code&gt;perf_data_array&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// info de l'événement classique&lt;/span&gt;
    &lt;span class="s2"&gt;"perf_data_array"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"metric"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"nom_de_ma_metrique"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;42.1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"GAUGE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// GAUGE, COUNTER, ABSOLUTE ou DERIVE&lt;/span&gt;
            &lt;span class="c1"&gt;// champs optionnels&lt;/span&gt;
            &lt;span class="s2"&gt;"unit"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"min"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"max"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1337.42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"warn"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"crit"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1300&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ces données vont être historisée dans Canopsis. On peut donc noter 4 types de métriques :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GAUGE&lt;/code&gt; : on historise la valeur telle quelle&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;COUNTER&lt;/code&gt; : lorsque l'on récupère la valeur, on fait l'addition des valeurs historisées&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ABSOLUTE&lt;/code&gt; : on historise la valeur absolue&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DERIVE&lt;/code&gt; : il s'agit de la valeur dérivée par rapport au temps&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Une métrique est ensuite identifiée par :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le composant de l'événement&lt;/li&gt;
&lt;li&gt;la ressource de l'événement&lt;/li&gt;
&lt;li&gt;le nom de la métrique dans le tableau de &lt;em&gt;perfdata&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Le tout peut être affiché dans un chart :&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/68747470733a2f2f6c75742e696d2f7435554f6566485170612f385a48595364427878624f444f4a5377/8ZHYSdBxxbODOJSw" alt="screenshot de timechart" title="Source : https://lut.im/t5UOefHQpa/8ZHYSdBxxbODOJSw"&gt;&lt;/p&gt;

&lt;p&gt;On est ainsi en mesure de sélectionner un ensemble de métrique avec un filtre basé sur des expressions régulières :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;co:.*\.myhost re:cpu-.* me:system me:user me:wait&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Qui se traduit en filtre MongoDB :&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'$and'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'component'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'$regex'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'.*\.myhost'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'resource'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'$regex'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'cpu.*'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'$or'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'$regex'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'system'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'$regex'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'$regex'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'wait'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois les identifiants de métriques récupérés, on peut aller demander les points stockés en base, dans une fenêtre de temps bien définie.&lt;/p&gt;

&lt;p&gt;Une &lt;strong&gt;série&lt;/strong&gt; est donc munie :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d'un filtre de métrique&lt;/li&gt;
&lt;li&gt;d'une période d'agrégation avec un opérateur d'agrégation (le manager de &lt;em&gt;perfdata&lt;/em&gt; nous retournera les données agrégées)&lt;/li&gt;
&lt;li&gt;d'une période de consolidation&lt;/li&gt;
&lt;li&gt;d'une formule de consolidation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ici la partie consolidation sert à consolider les différents points agrégés en un seul, afin de produire une nouvelle métrique.&lt;/p&gt;

&lt;p&gt;La formule se construit de la manière suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on a des opérateurs qui prennent en paramètre un filtre de métrique qui sera appliqué sur l'ensemble de métriques déjà sélectionnées&lt;/li&gt;
&lt;li&gt;ces opérateurs retournent un point consolidé&lt;/li&gt;
&lt;li&gt;on peut les utiliser dans une expression mathématique classique&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Par exemple, &lt;code&gt;SUM("me:.*") / COUNT("me:.*")&lt;/code&gt;, permet de réaliser une moyenne.&lt;/p&gt;
&lt;h2 id="les-tâches-ordonnancées-et-les-notifications"&gt;Les tâches ordonnancées et les notifications&lt;/h2&gt;

&lt;p&gt;Parmi les moteurs de Canopsis, certains sont dédiés à une fonction précise : exécuter une tâche.&lt;/p&gt;

&lt;p&gt;Il y a donc un moteur &lt;strong&gt;scheduler&lt;/strong&gt; qui, régulièrement, va chercher à exécuter des jobs configurés selon une &lt;a href="http://www.kanzaki.com/docs/ical/rrule.html"&gt;règle de récurrence&lt;/a&gt;.&lt;br&gt;
En fonction du type de job, ce dernier sera redirigé au moteur correspondant, que l'on appellera un &lt;strong&gt;taskhandler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cela permet de construire un équivalent de &lt;code&gt;crontab&lt;/code&gt; au sein de Canopsis.&lt;/p&gt;

&lt;p&gt;Ces &lt;em&gt;taskhandlers&lt;/em&gt; ne servent pas uniquement à l'exécution de tâches ordonnancées, ils peuvent être utilisés en tant que notification :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;une règle du moteur &lt;em&gt;event_filter&lt;/em&gt; peut déclencher l'exécution d'un job si l'événement reçu matche le filtre de la règle&lt;/li&gt;
&lt;li&gt;par exemple, à la réception d'un événement &lt;code&gt;declareticket&lt;/code&gt;, on peut lancer l'exécution d'un job réalisant une requête d'insertion de ticket à un outil tiers&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Grâce à tout ces éléments, Canopsis est en mesure de répondre à de nombreux besoins, allant de la supervision simple, à l'analyse poussée de données afin de générer des rapports sur une infrastructure (ou autre).&lt;/p&gt;

&lt;p&gt;Notre objectif premier est la modularité du projet, afin de pouvoir fournir une solution sur mesure et de ne pas transformer l'outil en énorme usine à gaz. Pour résumer, on a répondu à cette problématique avec :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le découpage du &lt;em&gt;backend&lt;/em&gt; en projets Python embarquant : un &lt;em&gt;manager&lt;/em&gt;, éventuellement un moteur et un &lt;em&gt;webservice&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;le découpage du &lt;em&gt;frontend&lt;/em&gt; en briques embarquant : des composants, des &lt;em&gt;renderers&lt;/em&gt;, des &lt;em&gt;éditeurs&lt;/em&gt;, des &lt;em&gt;mixins&lt;/em&gt;, des &lt;em&gt;widgets&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;la schématisation des données et à l'avenir des actions possibles sur cette dernière (transformation, schématisation de l'API des &lt;em&gt;managers&lt;/em&gt;, …)&lt;/li&gt;
&lt;li&gt;le développement d'API générique permettant le changement de technologies sans modification du code&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Beaucoup de choses ont été faites, et beaucoup de travail reste à faire, notamment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la finalisation des rôles &lt;strong&gt;Ansible&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;l'intégration d'une notion de graphe pour les entités qui sont le centre de toutes les données stockées par Canopsis, afin de rendre le système complètement réflexif&lt;/li&gt;
&lt;li&gt;une séparation totale du &lt;em&gt;backend&lt;/em&gt; et du &lt;em&gt;frontend&lt;/em&gt;, permettant d'utiliser l'un sans l'autre&lt;/li&gt;
&lt;li&gt;génération de code à partir des schémas&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Bref, Canopsis est en constante évolution, et touche à de nombreuses problématiques toutes plus intéressantes les unes que les autres.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/news/presentation-technique-de-canopsis.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/news/presentation-technique-de-canopsis#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <author>
      <name>Benoît Sibaud</name>
    </author>
    <author>
      <name>Nÿco</name>
    </author>
    <author>
      <name>palm123</name>
    </author>
    <author>
      <name>Yvan Munoz</name>
    </author>
    <author>
      <name>Xavier Claude</name>
    </author>
    <category term="Supervision"/>
    <category term="supervision"/>
    <category term="python"/>
    <category term="monitoring"/>
    <category term="admin"/>
    <category term="hypervision"/>
    <category term="visualisation"/>
    <category term="canopsis"/>
    <wfw:commentRss>http://linuxfr.org/nodes/108104/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/36331</id>
    <published>2016-01-27T17:07:40+01:00</published>
    <updated>2016-01-27T17:07:40+01:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/code-python-en-bdd-avec-canopsis"/>
    <title>Code Python en BDD avec Canopsis</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/4.0/deed.fr</rights>
    <content type="html">&lt;h2 id="1-introduction"&gt;1. Introduction&lt;/h2&gt;

&lt;p&gt;Avant de rentrer dans le vif du sujet, une petite présentation de Canopsis s'impose.&lt;/p&gt;

&lt;p&gt;&lt;img src="//img.linuxfr.org/img/687474703a2f2f7777772e63616e6f707369732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30312f63616e6f707369732d333030783131332e706e67/canopsis-300x113.png" alt="Canopsis Logo" title="Source : http://www.canopsis.com/wp-content/uploads/2015/01/canopsis-300x113.png"&gt;&lt;/p&gt;

&lt;p&gt;Il s'agit d'une solution d'hypervision sous licence AGPL3, capable d'agréger de nombreuses sources de données afin de les présenter à l'utilisateur, et de lui permettre d'interagir avec de manière standardisée et cohérente.&lt;/p&gt;

&lt;p&gt;L'architecture du projet, grossièrement simplifiée, se compose des éléments suivants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;des connecteurs récupèrent les données depuis différentes sources (Nagios/Shinken/Icinga/…, jMeter, Sikuli, BDD type SQL, API REST, …), et les envoient sur un bus de données sous forme d'événement standardisé&lt;/li&gt;
&lt;li&gt;des moteurs consomment les événements afin de les traiter et de les stocker de manière cohérente en base de données&lt;/li&gt;
&lt;li&gt;une API REST fournit un accès à ces données&lt;/li&gt;
&lt;li&gt;un application web complètement personnalisable permet à l'utilisateur de construire ses vues et de décider comment afficher, valoriser et interagir avec ces données&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Les parties moteurs et API REST sont développées en Python, et c'est ce qui va nous intéresser dans cet article.&lt;/p&gt;
&lt;h2 id="2-charger-le-code-dynamiquement"&gt;2. Charger le code dynamiquement&lt;/h2&gt;

&lt;p&gt;Du travail est en cours sur ce projet afin de généraliser la modularité du projet.&lt;/p&gt;

&lt;p&gt;Actuellement, un moteur se présente comme un daemon, et s'implémente en surclassant une classe de base abstraite afin d'implémenter certaines méthodes.&lt;/p&gt;

&lt;p&gt;C'est certes simple, mais pas suffisamment souple car cela ne permet pas de bien découper le projet quand les fonctionnalités s'additionnent, on se retrouve ainsi avec un paquet python &lt;code&gt;engines&lt;/code&gt; qui fait un peu fourre tout.&lt;/p&gt;

&lt;p&gt;L'idée était donc de rentre tout cela plus modulaire. Et la solution adoptée fut donc de spécifier dans le fichier de configuration l'implémentation des méthodes. La classe de base (que l'on n'a plus besoin de toucher) va charger le code tel qu'il est spécifié dans la configuration.&lt;/p&gt;

&lt;p&gt;Un exemple vaut mieux qu'un long discours.&lt;/p&gt;

&lt;p&gt;Avec ce fichier de configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="k"&gt;[engine:myengine]&lt;/span&gt;

&lt;span class="na"&gt;event_processing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;canopsis.myfeature.process.event_processing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le moteur saura aller chercher la fonction &lt;code&gt;event_processing&lt;/code&gt; dans le paquet python &lt;code&gt;canopsis.myfeature.process&lt;/code&gt;, et l'implémentation se résume à ceci :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;event_processing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# do something with event&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce système permet donc de mieux découper le code, chaque fonctionnalité apporte ses propres implémentations pour chaque aspect du projet.&lt;/p&gt;

&lt;p&gt;Cela repose notamment sur un petit utilitaire :&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;canopsis.common.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;

&lt;span class="n"&gt;event_processing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'canopsis.myfeature.process.event_processing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous visons a démocratiser dans le projet ce genre d'usage, toujours pour une meilleure découpe, et une meilleure maintenabilité.&lt;/p&gt;
&lt;h2 id="3-le-vif-du-sujet-enfin"&gt;3. Le vif du sujet (enfin)&lt;/h2&gt;

&lt;p&gt;En parcourant un peu le web, je tombe sur un &lt;a href="https://nvbn.github.io/2016/01/04/import-from-github/"&gt;article&lt;/a&gt; en particulier.&lt;/p&gt;

&lt;p&gt;TL;DR: cela présente le mécanisme qui permet d'agrémenter le système d'import de Python avec de nouvelles fonctionnalités (ici un import depuis un dépôt Github).&lt;/p&gt;

&lt;p&gt;Bon, fonctionnalité un peu risquée dans le cas où le code dépend du bon vouloir d'un inconnu à ne pas supprimer/casser son code.&lt;/p&gt;

&lt;p&gt;MAIS, le mécanisme présenté peut avoir d'autres usages, c'est donc notre cas.&lt;/p&gt;

&lt;p&gt;Ici, il est utilisé afin de stocker du code dans une base de données :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;document MongoDB&lt;/li&gt;
&lt;li&gt;entrée dans une table SQL&lt;/li&gt;
&lt;li&gt;… (avec le système de &lt;code&gt;storage&lt;/code&gt;, nous sommes capable de développer un driver pour n'importe quelle base de données)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ce qui permet ainsi de stocker le code des moteurs (et autres à l'avenir) dans MongoDB actuellement :&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"myfeature"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"def event_processing(event, **_):\n    # do something with event\n"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et de le référencer dans la configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="k"&gt;[engine:myengine]&lt;/span&gt;

&lt;span class="na"&gt;event_processing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;canopsis.pyloader.myfeature.event_processing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après cela, nous serons en mesure d'écrire un schéma JSON décrivant le document en base, et ce dernier sera utilisé par l'application web pour générer automatiquement un modèle, utilisable pour faire un listing des morceaux de code présent en base.&lt;/p&gt;

&lt;p&gt;L'édition du code pourra ainsi se faire depuis l'application web de Canopsis, même si ce n'est pas l'objectif premier, cela permettra de modifier à l'exécution le traitement des données, par le biais de l'API REST.&lt;/p&gt;

&lt;p&gt;On peut même imaginer une sorte de &lt;em&gt;pastebin&lt;/em&gt; contenant diverses implémentations, qu'il suffira d'injecter pour tester avant de considérer un merge.&lt;/p&gt;
&lt;h2 id="4-conclusion"&gt;4. Conclusion&lt;/h2&gt;

&lt;p&gt;Cette fonctionnalité, simple mais efficace, est intégrée à un plus gros chantier (de migration du code utilisant l'ancienne API pour les moteurs, à la nouvelle API plus dynamique), et ne sera donc pas disponible tout de suite.&lt;/p&gt;

&lt;p&gt;En attendant, on peut toujours suivre l'avancée du projet sur notre &lt;a href="https://git.canopsis.net/explore"&gt;Gitlab&lt;/a&gt;.&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/code-python-en-bdd-avec-canopsis.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/code-python-en-bdd-avec-canopsis#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="canopsis"/>
    <category term="python"/>
    <wfw:commentRss>http://linuxfr.org/nodes/108009/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/32783</id>
    <published>2012-07-02T12:06:35+02:00</published>
    <updated>2012-07-02T12:06:35+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/lemonldap-cli"/>
    <title>lemonldap-cli</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;p&gt;&lt;strong&gt;LemonLDAP::NG&lt;/strong&gt; est une excellente solution Open-Source pour réaliser facilement un système de SSO (Signle-Sign On).&lt;/p&gt;

&lt;p&gt;Développé en &lt;em&gt;perl&lt;/em&gt;, il s'intègre à &lt;strong&gt;apache2&lt;/strong&gt; sans grand soucis de configuration.&lt;/p&gt;

&lt;p&gt;La configuration de &lt;em&gt;LemonLDAP::NG&lt;/em&gt; peut se faire via une interface web, le &lt;em&gt;manager&lt;/em&gt;.&lt;br /&gt;
C'est simple, rapide, et pas casse-tête. On arrive facilement à un résultat utilisable pleinement.&lt;/p&gt;

&lt;p&gt;Cependant, quittons notre serveur local :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Je suis une entreprise qui souhaite pouvoir déployer une application rapidement ;&lt;/li&gt;
&lt;li&gt;Je veux que chacune de mes applications soient sécurisées avec &lt;em&gt;LemonLDAP::NG&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Le problème est que pour déployer une application et l'intégrer dans &lt;em&gt;LemonLDAP::NG&lt;/em&gt;, il faut passer par le &lt;em&gt;manager&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Cet outil permet donc de modifier la configuration de &lt;em&gt;LemonLDAP::NG&lt;/em&gt; via la ligne de commande, afin de pouvoir automatiser le déploiement de vos applications (en intégrant par exemple les commandes modifiant la configuration de &lt;em&gt;LemonLDAP::NG&lt;/em&gt; dans le processus d'installation de votre application).&lt;/p&gt;

&lt;p&gt;Cet outil est également développé en &lt;em&gt;perl&lt;/em&gt;, la version 0.1 est sortie récemment, mais de nouvelles fonctionnalités ont été ajoutées et une version 0.2 est à attendre.&lt;/p&gt;

&lt;p&gt;Voici un lien vers le site web du projet (une simple page github générée à partir du README) : &lt;a href="http://linkdd.github.com/lemonldap-cli/"&gt;http://linkdd.github.com/lemonldap-cli/&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/lemonldap-cli.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/lemonldap-cli#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="sso"/>
    <category term="lemonldap"/>
    <category term="ldap"/>
    <category term="tty"/>
    <category term="perl"/>
    <category term="lemonldapcli"/>
    <wfw:commentRss>http://linuxfr.org/nodes/94711/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/32702</id>
    <published>2012-06-11T01:15:27+02:00</published>
    <updated>2012-06-11T01:15:27+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/sondage-d-interet-pour-fwallsh"/>
    <title>Sondage d'intérêt pour fwallsh</title>
    <content type="html">&lt;p&gt;&lt;strong&gt;fwallsh&lt;/strong&gt; est un projet que je commence avec deux autres étudiants de &lt;em&gt;SUPINFO International University&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Il a pour but de fournir à l'administrateur système sous &lt;em&gt;Linux&lt;/em&gt; (et idéalement &lt;em&gt;BSD&lt;/em&gt;) une invite de commande,&lt;br /&gt;
similaire à la CLI de &lt;strong&gt;CISCO iOS&lt;/strong&gt;, lui permettant de configurer un serveur, un routeur, ou autres matériels&lt;br /&gt;
réseaux.&lt;/p&gt;

&lt;p&gt;Ainsi, via un jeu de commandes, vous pourriez configurer votre firewall &lt;em&gt;iptables&lt;/em&gt; (&lt;em&gt;pf&lt;/em&gt; pour &lt;em&gt;BSD&lt;/em&gt;), votre&lt;br /&gt;
serveur &lt;em&gt;SSH&lt;/em&gt;, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Je réalise donc un petit sondage afin de mieux orienter le développement de ce projet :&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://docs.google.com/spreadsheet/viewform?formkey=dFB6cWhuUnFZUFpiUDNjY21ZUmZqbHc6MQ"&gt;Lien vers le sondage&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Je vous remercie d'avance pour le temps que vous prendrez en répondant à ce sondage.&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/sondage-d-interet-pour-fwallsh.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/sondage-d-interet-pour-fwallsh#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="fwallsh"/>
    <category term="système"/>
    <category term="linux"/>
    <category term="administration"/>
    <wfw:commentRss>http://linuxfr.org/nodes/94461/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:News/29024</id>
    <published>2012-01-18T15:25:05+01:00</published>
    <updated>2012-01-18T15:25:05+01:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/news/wmfs-2-est-disponible"/>
    <title>WMFS 2 est disponible</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;div&gt;&lt;p&gt;Extrait de journal de discussion sur IRC :&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt; 19:06 &amp;lt;xorg62_&amp;gt; WMFS2 dans le master \o/
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Traduction : &lt;em&gt;la version 2 de WMFS est sortie, c'est par conséquent une joie intense palpable qui s'exprime aujourd'hui dans l'atmosphère&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Non ce n'est pas une fausse annonce, la nouvelle version tant attendue de &lt;strong&gt;WMFS2&lt;/strong&gt; est bien sortie ce lundi 16 janvier ! Qu'apporte-t-elle ? Pourquoi une nouvelle version ?&lt;/p&gt;

&lt;p&gt;Pour information ou rappel, WMFS est l'acronyme de Window Manager From Scratch. Il s'agit d'un gestionnaire de fenêtres libre (licence BSD) pour X11, du type « &lt;em&gt;tiling&lt;/em&gt; », comme Ion et Awesome par exemple.&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;lien n°1 : &lt;a title="http://wmfs.info" hreflang="en" href="http://linuxfr.org/redirect/74757"&gt;Site officiel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°2 : &lt;a title="http://wmfs.info/news/4" hreflang="en" href="http://linuxfr.org/redirect/74758"&gt;Annonce sur le site&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°3 : &lt;a title="http://github.com/xorg62/wmfs" hreflang="en" href="http://linuxfr.org/redirect/74759"&gt;WMFS2 sur github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°4 : &lt;a title="http://github.com/xorg62/wmfs/tree/wmfs1" hreflang="fr" href="http://linuxfr.org/redirect/74760"&gt;WMFS1 sur github&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2 id="toc_0"&gt;Nouvelle version, nouveau code&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;xorg62&lt;/em&gt; avait décidé il y a quelques mois de reprendre le code de &lt;strong&gt;WMFS&lt;/strong&gt; de zéro, afin de repartir sur une base saine et une architecture propre. Ayant désormais un cahier des charges bien défini pour ce bijou des &lt;em&gt;tiling window managers&lt;/em&gt;, il fallait donc écrire un code en conséquence, là fût le but premier de &lt;strong&gt;WMFS2&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ainsi, cette nouvelle version dispose d'une architecture toute nouvelle, et toute propre. Cela signifie donc : de nouvelles fonctionnalités, d'anciennes fonctionnalités améliorées, et d'autres à venir.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Un point sur WMFS1&lt;/h2&gt;

&lt;p&gt;Actuellement, si vous avez &lt;strong&gt;WMFS1&lt;/strong&gt;, vous disposez des fonctionnalités suivantes :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Différentes dispositions dynamiques&lt;/li&gt;
&lt;li&gt;Un mode de pavage manuel (le &lt;em&gt;splitmode&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Une barre d'infos avec :

&lt;ul&gt;&lt;li&gt;Liste des &lt;em&gt;tags&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Menu disposition&lt;/li&gt;
&lt;li&gt;Une barre de sélection (optionnelle, permet d'afficher le titre du client actuellement sélectionné, en cliquant dessus on obtient un menu contenant tout les clients du &lt;em&gt;tag&lt;/em&gt; courant)&lt;/li&gt;
&lt;li&gt;Une barre d'état (permet d'afficher différentes informations dans la barre d'info, via une &lt;em&gt;XProp&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Des &lt;em&gt;tags&lt;/em&gt; (avec possibilité de cacher les &lt;em&gt;tag&lt;/em&gt; sans aucun client, ainsi que le &lt;em&gt;tagging&lt;/em&gt; dynamique)&lt;/li&gt;
&lt;li&gt;Un lanceur (avec complétion, possibilité de configurer la commande de lancement, pour par exemple lancer directement une commande WMFS)&lt;/li&gt;
&lt;li&gt;Une zone de notification (optionnelle)&lt;/li&gt;
&lt;li&gt;Une configuration aisée&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id="toc_2"&gt;Les nouveautés de WMFS2&lt;/h2&gt;

&lt;h3 id="toc_3"&gt;Pavage manuel&lt;/h3&gt;

&lt;p&gt;La plus importante des nouveautés est au niveau du pavage (&lt;em&gt;tiling&lt;/em&gt;), désormais il est entièrement manuel (il fut appelé un temps &lt;strong&gt;split layout&lt;/strong&gt;). Les fenêtres sont séparées automatiquement (verticalement ou horizontalement selon la taille du client) et vous pouvez les redimensionner comme bon vous semble.&lt;/p&gt;

&lt;h3 id="toc_4"&gt;La technologie des réglages précédents (&lt;em&gt;presets&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;Mais ce n'est pas la seule nouveautés, &lt;em&gt;xorg62&lt;/em&gt; a introduit le concept des &lt;strong&gt;presets&lt;/strong&gt;, un historique des dispositions des clients. Ainsi lorsque vous redimensionnez un client, vous pouvez revenir à la disposition précédent le redimensionnement, ingénieux non ?&lt;/p&gt;

&lt;h3 id="toc_5"&gt;Le &lt;em&gt;tabbing&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Plusieurs clients dans une seule &lt;em&gt;frame&lt;/em&gt; ? C'est désormais possible, vous pouvez &lt;em&gt;tabber&lt;/em&gt; vos clients dans toutes les directions, et lorsque vous souhaitez les &lt;em&gt;untabber&lt;/em&gt;, ces derniers reprennent leurs anciennes places.&lt;/p&gt;

&lt;h3 id="toc_6"&gt;Les &lt;em&gt;infobar&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Oui, j'ai bien dit &lt;strong&gt;les&lt;/strong&gt;. Avec l'apparition de la section &lt;em&gt;bars&lt;/em&gt; dans la configuration, on peut ainsi créer de multiples barres d'info. Dans cette section de la configuration, on peut donc nommer chaque &lt;em&gt;infobar&lt;/em&gt; et choisir quels éléments seront présents dedans :&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt; [bars]
      # Elements :
      # t - Tag list
      # s - Status
      # more elements are coming


      [bar]
           name = "topbar"
           screen = 0
           position = 0
           elements = "t"
           theme = "default"
      [/bar]


      [bar]
           name = "botbar"
           screen = 0
           position = 0
           elements = "s"
           theme = "other_theme"
      [/bar]
 [/bars]
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="toc_7"&gt;Apparition de la section &lt;em&gt;themes&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Notre cher &lt;em&gt;xorg62&lt;/em&gt; a donc concentré toutes les options graphiques (couleurs, polices, etc.) dans une section de la configuration. Mieux, il a introduit la possibilité de créer plusieurs thèmes, vous pouvez donc choisir un thème spécifique pour une barre d'info en particulier, ou alors définir (à l'aide des règles) un thème différent pour certaines applications, les possibilités sont multiples !&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt; [themes]
      [theme]
           name = "mon_theme"


           font = "fixed"


           #...
      [/theme]


      [theme]
           name = "autre_theme"


           font = "terminus"


           # ...
      [/theme]
 [/themes]
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id="toc_8"&gt;Le FIFO&lt;/h3&gt;

&lt;p&gt;C'est le seul endroit de &lt;strong&gt;WMFS2&lt;/strong&gt; sur lequel j'ai participé. Vous vous souvenez de &lt;code&gt;wmfs -s&lt;/code&gt; et de &lt;code&gt;wmfs -c&lt;/code&gt; ? Cela vous permettait d'envoyer un nouveau texte d'état (&lt;em&gt;statustext&lt;/em&gt;), et de lancer quelques fonctions de &lt;strong&gt;WMFS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ceci a été remplacé par un &lt;strong&gt;FIFO&lt;/strong&gt; :&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt; $ echo "spawn urxvt" &amp;gt; /tmp/wmfs-$DISPLAY.fifo
 $ echo "status &amp;lt;infobar name&amp;gt; &amp;lt;statustext&amp;gt;" &amp;gt; /tmp/wmfs-$DISPLAY.fifo
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Bon, et maintenant, il vous reste plus qu'à prendre votre cher &lt;em&gt;conky&lt;/em&gt;, à lui faire afficher sur la ligne de commande&lt;br /&gt;&lt;code&gt;"status &amp;lt;infobar name&amp;gt; ..."&lt;/code&gt; et enfin :&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt; $ conky &amp;gt; /tmp/wmfs-$DISPLAY.fifo
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Les possibilités sont encore une fois multiples !&lt;/p&gt;

&lt;h3 id="toc_9"&gt;Les choses manquantes, mais qui vont arriver&lt;/h3&gt;

&lt;p&gt;Le lanceur, la zone de notification et certaines &lt;em&gt;uicb&lt;/em&gt; (&lt;strong&gt;u&lt;/strong&gt;ser &lt;strong&gt;i&lt;/strong&gt;nterface &lt;strong&gt;c&lt;/strong&gt;all&lt;strong&gt;b&lt;/strong&gt;ack) n'ont pas encore été implémentées, mais cela ne saurait tarder.&lt;/p&gt;

&lt;h2 id="toc_10"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Je vous invite à tester cette nouvelle version qui promet d'être encore plus énorme que la première !&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/news/wmfs-2-est-disponible.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/news/wmfs-2-est-disponible#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <author>
      <name>Nÿco</name>
    </author>
    <author>
      <name>Benoît Sibaud</name>
    </author>
    <author>
      <name>Xavier Teyssier</name>
    </author>
    <category term="Serveurs d'affichage"/>
    <category term="wmfs"/>
    <wfw:commentRss>http://linuxfr.org/nodes/89061/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/31637</id>
    <published>2011-09-24T01:11:54+02:00</published>
    <updated>2011-09-24T01:11:54+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/des-nouvelles-de-cream-browser"/>
    <title>Des nouvelles de Cream-Browser</title>
    <content type="html">&lt;p&gt;Je vous avez déjà parlé de &lt;em&gt;Cream-Browser&lt;/em&gt; dans ce &lt;a href="http://linuxfr.org/users/linkdd/journaux/cream-browser"&gt;journal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Après 5 long mois je pense qu'il est temps de rédiger un nouvel article pour ceux ayant la flemme de suivre le blog, le flux &lt;em&gt;RSS&lt;/em&gt;, la mailing list ou carrément le &lt;em&gt;commit log&lt;/em&gt; sur &lt;strong&gt;github&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;J'avais dans mon dernier article présenté deux caractéristiques de &lt;em&gt;Cream-Browser&lt;/em&gt; :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;support de &lt;em&gt;GTK+-2.0&lt;/em&gt; et &lt;em&gt;GTK+-3.0&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;les &lt;strong&gt;GModule&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;la configuration en &lt;strong&gt;lua&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Quelques petites choses ont changés depuis.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Suppression du support de &lt;em&gt;GTK+-2.0&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;C'est relativement chiant de maintenir le support pour deux librairies, cela implique d'avoir les deux installées même si au final on en utilise qu'une seule :/&lt;/p&gt;

&lt;p&gt;De plus &lt;strong&gt;GTK+-3.0&lt;/strong&gt; apporte des fonctionnalités fortes intéressantes. Le support de &lt;strong&gt;GTK+-2.0&lt;/strong&gt; handicape donc le développement sur certains point.&lt;/p&gt;

&lt;p&gt;Bref désormais &lt;em&gt;Cream-Browser&lt;/em&gt;, c'est &lt;strong&gt;&lt;em&gt;full-gtk3&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Les GModule remplacés par une interface.&lt;/h2&gt;

&lt;p&gt;Pour rappel, &lt;strong&gt;GModule&lt;/strong&gt; me permet de charger une librairie dynamique au &lt;strong&gt;runtime&lt;/strong&gt;. J'avais eu dans l'idée de déléguer le support des protocoles à des modules externes, ainsi on ne chargerait pas en mémoire ce dont on ne veut pas.&lt;/p&gt;

&lt;p&gt;L'idée est belle, mais pas réalisable. Si le module externe dépend lui même d'une autre librairie dynamique, il faut que &lt;em&gt;Cream-Browser&lt;/em&gt; soit lié à cette librairie lors de la compilation. On perd donc totalement l'aspect &lt;strong&gt;runtime&lt;/strong&gt; de la chose.&lt;/p&gt;

&lt;p&gt;Donc au lieu de créer un module externe, il s'agit désormais d'un module interne (un simple &lt;strong&gt;GObject&lt;/strong&gt; qui implémente l'interface &lt;strong&gt;CreamModule&lt;/strong&gt;, via cette interface &lt;em&gt;Cream-Browser&lt;/em&gt; utilise le module qui est associé à tel ou tel protocole).&lt;/p&gt;

&lt;h2 id="toc_2"&gt;La configuration lua&lt;/h2&gt;

&lt;p&gt;Je tiens à préciser qu'il s'agit ici uniquement de la configuration qui est en &lt;em&gt;lua&lt;/em&gt;, pas comme &lt;strong&gt;luakit&lt;/strong&gt; (celui ci se présente sous la forme d'une librairie &lt;em&gt;lua&lt;/em&gt; développé en &lt;em&gt;C&lt;/em&gt;, le navigateur à proprement parler est donc développé en &lt;em&gt;lua&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Actuellement seul les key-bindings sont fait, je vous invite à voir cette &lt;a href="http://github.com/linkdd/cream-browser/wiki/Configuration"&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="toc_3"&gt;GtkVimSplit&lt;/h2&gt;

&lt;p&gt;Je suis plutôt fier de cette fonctionnalité (qui a dit auto-satisfaction ?), et je n'ai vu aucun navigateur l'implémenter, je n'ai peut-être pas cherché assez loin.&lt;/p&gt;

&lt;p&gt;Vous, linuxiens aguerri, vous connaissez &lt;strong&gt;vim&lt;/strong&gt;, vous connaissez les commandes &lt;strong&gt;&lt;em&gt;split&lt;/em&gt;&lt;/strong&gt; et &lt;strong&gt;&lt;em&gt;vsplit&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Le &lt;em&gt;GtkVimSplit&lt;/em&gt; est un widget de ma création permettant la même chose dans &lt;em&gt;Cream-Browser&lt;/em&gt;. Je vous laisse voir le résultat sur la section &lt;a href="http://github.com/linkdd/cream-browser/wiki/Screenshots"&gt;captures d'écran&lt;/a&gt; du wiki.&lt;/p&gt;

&lt;p&gt;Après tout, je veux faire un navigateur &lt;strong&gt;vim-like&lt;/strong&gt;, je me devais d'implémenter cette fonctionnalité.&lt;/p&gt;

&lt;h2 id="toc_4"&gt;Personnalisation de l'interface via du &lt;em&gt;CSS&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;C'est une des fonctionnalités de &lt;strong&gt;GTK+-3.0&lt;/strong&gt; qui m'a séduit : le &lt;strong&gt;&lt;em&gt;GtkCssProvider&lt;/em&gt;&lt;/strong&gt; pour charger une feuille de style &lt;em&gt;CSS&lt;/em&gt; afin de personnaliser l'apparence des widgets &lt;em&gt;GTK&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On passe donc de ceci :&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/linkdd/cream-browser/wiki/screenshots/big/gtkvimsplit.png"&gt;
&lt;img src="https://github.com/linkdd/cream-browser/wiki/screenshots/small/gtkvimsplit.png" alt="screenshot" /&gt;
&lt;br /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;à ceci :&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/linkdd/cream-browser/wiki/screenshots/big/css-theme.png"&gt;
&lt;img src="https://github.com/linkdd/cream-browser/wiki/screenshots/small/css-theme.png" alt="screenshot" /&gt;
&lt;br /&gt;
&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Ce qu'il reste à faire&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;Cookies/Session/Favoris/Historique : la base d'un navigateur quoi.&lt;/li&gt;
&lt;li&gt;La complétion&lt;/li&gt;
&lt;li&gt;Le &lt;strong&gt;follow-hint&lt;/strong&gt; : Essayez de tapez "f" lorsque vous êtes sous &lt;strong&gt;Vimperator&lt;/strong&gt;/&lt;strong&gt;Pentadactyl&lt;/strong&gt; (&lt;em&gt;firefox&lt;/em&gt;), vous verrez comme c'est pratique :)&lt;/li&gt;
&lt;li&gt;L'API &lt;em&gt;lua&lt;/em&gt; : Elle avance, mais il y a encore pas mal de choses à faire dedans.&lt;/li&gt;
&lt;li&gt;Un &lt;em&gt;plugin-blocker&lt;/em&gt; : Par exemple afficher un bouton &lt;strong&gt;"Activer l'animation flash"&lt;/strong&gt; à la place de l'animation en elle même et l'activer seulement si on clique sur le bouton, le tout scriptable en &lt;em&gt;lua&lt;/em&gt; bien sûr.&lt;/li&gt;
&lt;li&gt;La finition du module &lt;strong&gt;WebKit&lt;/strong&gt; et le développement de quelques autres ((S)FTP, Gopher, ...)&lt;/li&gt;
&lt;li&gt;Et sûrement d'autres choses encore.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Bref j'ai encore du boulot mais j'espère sortir rapidement une release ^^.&lt;/p&gt;

&lt;h2 id="toc_6"&gt;Infos supplémentaires&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;Un canal IRC est ouvert depuis les débuts du projet : #cream-browser @ irc.freenode.net&lt;/li&gt;
&lt;li&gt;Le site Internet est disponible à l'adresse suivante : &lt;a href="http://cream-browser.net/"&gt;http://cream-browser.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Le blog est disponible à l'adresse suivante : &lt;a href="http://cream-browser.net/blog/"&gt;http://cream-browser.net/blog/&lt;/a&gt; [&lt;a href="http://cream-browser.net/blog/rss2.xml"&gt;RSS&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Les mailing list : &lt;a href="http://groups.google.com/group/cream-browser-devel"&gt;devel&lt;/a&gt;, &lt;a href="http://groups.google.com/group/cream-browser-users"&gt;users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Le wiki : &lt;a href="http://github.com/linkdd/cream-browser/wiki/"&gt;http://github.com/linkdd/cream-browser/wiki/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lien sur github : &lt;a href="http://github.com/linkdd/cream-browser"&gt;http://github.com/linkdd/cream-browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/des-nouvelles-de-cream-browser.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/des-nouvelles-de-cream-browser#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="web"/>
    <category term="creambrowser"/>
    <category term="vim"/>
    <category term="gtk3"/>
    <category term="lua"/>
    <category term="browser"/>
    <category term="logiciel"/>
    <wfw:commentRss>http://linuxfr.org/nodes/87526/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/31141</id>
    <published>2011-05-17T18:14:43+02:00</published>
    <updated>2011-05-17T18:14:43+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/plstblog-un-g%C3%A9n%C3%A9rateur-de-blog-statique-%C3%A9crit-en-perl"/>
    <title>Plstblog, un générateur de blog statique écrit en Perl</title>
    <content type="html">&lt;p&gt;Les pages github c'est pratique pour héberger le site de votre/vos projet(s), mais pour un blog c'est une autre histoire.&lt;/p&gt;

&lt;p&gt;En effet, vous ne pouvez mettre que du HTML, il vous faut donc un générateur de blog statique. En gros vous écrivez vos articles sur votre machine, générez les pages HTML et envoyez ça sur le dépôt git.&lt;/p&gt;

&lt;p&gt;J'en avais besoin d'un simple : un header, l'article, un footer. J'ai donc profité de ce besoin pour apprendre le &lt;em&gt;perl&lt;/em&gt; et ainsi né : &lt;strong&gt;P&lt;/strong&gt;er&lt;strong&gt;l St&lt;/strong&gt;atic &lt;strong&gt;Blog&lt;/strong&gt; (soit: &lt;em&gt;plstblog&lt;/em&gt;).&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;La configuration est simple (réduite au minimum) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blogurl=http://example.com/blog
datefmt=%T %D
localpath=/path/to/your/blog
localposts=/path/to/your/articles.markdown

tmpl.top=/path/to/your/header.template
tmpl.bot=/path/to/your/footer.template

tmpl.idx.top=/path/to/your/index/header.template
tmpl.idx.bot=/path/to/your/index/footer.template
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Les articles sont écrits dans la syntaxe &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;La gestion des index est faites par vous même (la date de la dernière modification de l'article est affiché en page d'index).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vous avez 4 templates :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;tmpl.top&lt;/code&gt; : Le code HTML du &lt;em&gt;header&lt;/em&gt; d'un article.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmpl.bot&lt;/code&gt; : Le code HTML du &lt;em&gt;footer&lt;/em&gt; d'un article.&lt;/li&gt;
&lt;li&gt;Ces deux dernières templates peuvent contenir les variables suivantes :

&lt;ul&gt;&lt;li&gt;&lt;code&gt;{%title%}&lt;/code&gt; : Titre de l'article.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%idx%}&lt;/code&gt; : Index de l'article.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%ohidden}&lt;/code&gt; : Si l'article précédent n'existe pas, cela vaut &lt;code&gt;"hidden"&lt;/code&gt; (vous pouvez par exemple le mettre dans l'attribut de balise &lt;code&gt;class=&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%nhidden}&lt;/code&gt; : Pareil qu'au dessus mais pour l'article suivant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%otitle%}&lt;/code&gt; : Titre de l'article précédent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%oidx%}&lt;/code&gt; : Index de l'article précédent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%ntitle%}&lt;/code&gt; : Titre de l'article suivant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{%nidx%}&lt;/code&gt; : Index de l'article suivant.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmpl.idx.top&lt;/code&gt; : Le code HTML du &lt;em&gt;header&lt;/em&gt; de la page d'index.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmpl.idx.bot&lt;/code&gt; : Le code HTML du &lt;em&gt;footer&lt;/em&gt; de la page d'index.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;La page d'index est juste une liste de la forme :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;span class="link"&amp;gt;&amp;lt;a href="@blogurl@/post/{%idx%}.html"&amp;gt;{%title%}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class="date"&amp;gt;Last edition: @date according to datefmt@&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Projet à voir sur &lt;a href="https://github.com/linkdd/plstblog"&gt;github&lt;/a&gt;. ;)&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/plstblog-un-g%C3%A9n%C3%A9rateur-de-blog-statique-%C3%A9crit-en-perl.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/plstblog-un-g%C3%A9n%C3%A9rateur-de-blog-statique-%C3%A9crit-en-perl#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="perl"/>
    <category term="generator"/>
    <category term="static"/>
    <category term="blog"/>
    <wfw:commentRss>http://linuxfr.org/nodes/86117/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/31073</id>
    <published>2011-04-30T12:09:16+02:00</published>
    <updated>2011-04-30T12:09:16+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/synchronisez-vos-donn%C3%A9es-avec-dropbox"/>
    <title>Synchronisez vos données avec Dropbox</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;p&gt;J'ai découvert durant mes vacances l'application &lt;em&gt;Dropbox&lt;/em&gt; pour &lt;em&gt;Android&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Le principe de &lt;em&gt;Dropbox&lt;/em&gt; est simple. Vous placez vos fichiers dans un dossier de votre ordinateur (qui est synchronisé sur le site internet de &lt;em&gt;Dropbox&lt;/em&gt; via votre application cliente), ensuite les fichiers sont envoyés sur les serveurs de &lt;em&gt;Dropbox&lt;/em&gt; qui seront rapatriés sur chaque machines associées à votre compte.&lt;/p&gt;

&lt;p&gt;Par exemple je prend une photo avec mon téléphone. Je la sauvegarde dans mon dossier &lt;em&gt;Dropbox&lt;/em&gt;, celle ci est envoyé sur leurs serveurs (je peux y accéder via le site) et sur mon ordinateur personnel.&lt;/p&gt;

&lt;p&gt;C'est un peu comme &lt;strong&gt;NFS&lt;/strong&gt; mais en mieux :)&lt;/p&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/synchronisez-vos-donn%C3%A9es-avec-dropbox.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/synchronisez-vos-donn%C3%A9es-avec-dropbox#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="dropbox"/>
    <category term="cloud"/>
    <category term="sapucépalibre"/>
    <category term="synchronisation"/>
    <category term="propriétaire"/>
    <category term="cloud_computing_pour_diçaïdeur_pressé"/>
    <category term="donnees"/>
    <wfw:commentRss>http://linuxfr.org/nodes/85866/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:News/28095</id>
    <published>2011-04-12T09:18:35+02:00</published>
    <updated>2011-04-12T09:18:35+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/news/wmfs-window-manager-from-scratch"/>
    <title>WMFS, Window Manager From Scratch</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;div&gt;&lt;h2&gt;WMFS, Window Manager From Scratch&lt;/h2&gt;

&lt;p&gt;WMFS est un gestionnaire de fenêtres dit &lt;strong&gt;&lt;em&gt;tiling&lt;/em&gt;&lt;/strong&gt;. Développé par &lt;em&gt;xorg62&lt;/em&gt; (et quelques utilisateurs du logiciel) en C à l’aide de la &lt;strong&gt;&lt;em&gt;XLib&lt;/em&gt;&lt;/strong&gt;. WMFS se distingue des autres &lt;em&gt;tiling window managers&lt;/em&gt; sur de nombreux points.&lt;/p&gt;

&lt;p&gt;Il intègre notamment pas mal d’agencements (&lt;em&gt;layouts&lt;/em&gt;), de belles fonctionnalités sur les &lt;em&gt;tags&lt;/em&gt; et possède une configuration très simple à prendre en main. C’est un WM souple et tout autant léger.&lt;/p&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;lien n°1 : &lt;a title="http://wmfs.info" hreflang="en" href="http://linuxfr.org/redirect/71710"&gt;Site officiel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°2 : &lt;a title="http://github.com/xorg62/wmfs" hreflang="en" href="http://linuxfr.org/redirect/71711"&gt;Github&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°3 : &lt;a title="http://msud.pl/pt" hreflang="fr" href="http://linuxfr.org/redirect/71712"&gt;WMFS, acte I : installation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°4 : &lt;a title="http://msud.pl/zw" hreflang="fr" href="http://linuxfr.org/redirect/71713"&gt;WMFS, acte II : lancement d’applications à l’ouverture d’une session&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°5 : &lt;a title="http://msud.pl/q4gE" hreflang="fr" href="http://linuxfr.org/redirect/71714"&gt;WMFS, acte III : les raccourcis claviers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;lien n°6 : &lt;a title="https://wiki.archlinux.org/index.php/WMFS" hreflang="en" href="http://linuxfr.org/redirect/71715"&gt;Wiki Archlinux&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h3&gt;I. Les layouts&lt;/h3&gt;

&lt;p&gt;Là est le point fort de tout &lt;em&gt;tiling WM&lt;/em&gt;, les &lt;em&gt;layouts&lt;/em&gt; sont les différents modes d’organisation des fenêtres sur votre environnement de travail. En plus des classiques &lt;em&gt;free&lt;/em&gt;, &lt;em&gt;max&lt;/em&gt; et &lt;em&gt;tile&lt;/em&gt; (gauche, droite, haut, bas), on peut utiliser les &lt;em&gt;layouts&lt;/em&gt; suivant :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;Grid&lt;/em&gt; : un simple tableau de n × n fenêtres ;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mirror Vertical&lt;/em&gt; : &lt;em&gt;layout&lt;/em&gt; développé pour une utilisation plus aisée de &lt;strong&gt;&lt;a href="http://fr.wikipedia.org/wiki/GIMP" title="Définition Wikipédia"&gt;GIMP&lt;/a&gt;&lt;/strong&gt;, la fenêtre principale est au centre de l’écran et les fenêtres secondaires sont placées à gauche et à droite ;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mirror Horizontal&lt;/em&gt; : de même que le &lt;em&gt;layout&lt;/em&gt; &lt;em&gt;Mirror Vertical&lt;/em&gt; sauf que les fenêtres secondaires sont placées au dessus et en dessous de la fenêtre principale.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remarque :&lt;/strong&gt; un nouveau &lt;em&gt;layout&lt;/em&gt; est en cours de développement et sera inspiré du traditionnel &lt;strong&gt;{v}split&lt;/strong&gt; de Vim.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vous connaissez sans doute le &lt;em&gt;layout&lt;/em&gt; « &lt;em&gt;magnifier&lt;/em&gt; » dans &lt;a href="http://fr.wikipedia.org/wiki/Awesome_%28logiciel%29"&gt;awesome&lt;/a&gt;, qui permet de placer une fenêtre spécifique au dessus des autres qui sont organisées en &lt;em&gt;tile&lt;/em&gt;. WMFS s’inspire de se &lt;em&gt;layout&lt;/em&gt; en implémentant le &lt;strong&gt;above_fc&lt;/strong&gt;, une option qui permet de placer le client au dessus des autres et cela dans tout &lt;em&gt;layout&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;II. Les tags&lt;/h3&gt;

&lt;p&gt;Comme beaucoup de WM, WMFS gère les &lt;strong&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/strong&gt; (bureaux virtuels), ainsi que le &lt;strong&gt;&lt;em&gt;dynamic tagging&lt;/em&gt;&lt;/strong&gt; (ajout / suppression de &lt;em&gt;tags&lt;/em&gt; à la volée). Il vous est possible de fusionner plusieurs &lt;em&gt;tags&lt;/em&gt;, de définir un &lt;em&gt;layout&lt;/em&gt; spécifique aux nouveaux &lt;em&gt;tags&lt;/em&gt;, d’échanger deux &lt;em&gt;tags&lt;/em&gt;, etc..&lt;/p&gt;

&lt;h3&gt;III. Selbar / Statusbar / Launcher &amp;amp; Systray&lt;/h3&gt;

&lt;p&gt;Dans un WM classique (non &lt;em&gt;tiling&lt;/em&gt;) il est utile d’avoir une barre de tâches pour avoir une liste des applications ouvertes. Sous WMFS, on pense que le &lt;em&gt;tiling&lt;/em&gt; nous permet d’outrepasser ce besoin (on voit tout ce qui est à l’écran, donc pas besoin). Il a cependant été développée une option bien pratique, la &lt;strong&gt;selbar&lt;/strong&gt; :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;elle permet d’afficher dans l’&lt;em&gt;infobar&lt;/em&gt; de WMFS le titre de la fenêtre ayant le &lt;em&gt;focus&lt;/em&gt; ;&lt;/li&gt;
&lt;li&gt;on définit dans la configuration les événements souris suivants :

&lt;ul&gt;&lt;li&gt;l’affichage d’un menu contextuel contenant la liste des clients ouverts (un clic sur l’un d’eux permet de lui donner le &lt;em&gt;focus&lt;/em&gt;),&lt;/li&gt;
&lt;li&gt;de donner le &lt;em&gt;focus&lt;/em&gt; au client suivant (dans la liste des clients) ou précédent.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Vous connaissez peut‐être &lt;em&gt;awesome&lt;/em&gt; et son immense souplesse vis‐à‐vis des informations affichées dans les &lt;em&gt;infobars&lt;/em&gt;. WMFS implémente à peu près la même chose :&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wmfs -s &lt;span class="o"&gt;[&lt;/span&gt;screen number&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;message to print in the statusbar&amp;gt;
Example :
&lt;span class="nv"&gt;$ &lt;/span&gt;wmfs -s &lt;span class="s2"&gt;"hello world"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;wmfs -s 0 &lt;span class="s2"&gt;"hello"&lt;/span&gt; ; wmfs -s 1 &lt;span class="s2"&gt;"world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créez votre programme / script afin d’afficher le résultat des commandes voulues (trafic réseau, usage disque, lecture &lt;em&gt;mpd&lt;/em&gt;…) dans l’&lt;em&gt;infobar&lt;/em&gt;. Bien sûr, cela n’est pas limité à du texte tel quel. À l’aide de différents formats, on peut intégrer des images, des couleurs, des barres de progression, des graphes, etc..&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remarque :&lt;/strong&gt; je développe actuellement une bibliothèque C qui permet d’envoyer le nouveau statut à WMFS sans passer par &lt;code&gt;« wmfs -s »&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En dernier point, WMFS possède également (comme la plupart des autres WM) un lanceur d’application (prompt dans l’&lt;em&gt;infobar&lt;/em&gt; permettant d’exécuter diverses commandes) et une zone de notification (&lt;em&gt;systray&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;IV. Une configuration aisée&lt;/h3&gt;

&lt;p&gt;La configuration se fait via le ficher « &lt;strong&gt;&lt;code&gt;~/.config/wmfs/wmfsrc&lt;/code&gt;&lt;/strong&gt; », mais peut-être découpée en de nombreux fichiers (un par section par exemple) grâce à la fonction &lt;code&gt;« @include "/chemin/vers/le/fichier/à/inclure" »&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La syntaxe est extrêmement simple, le « parseur » développé par « ksh » est basé sur la syntaxe de &lt;em&gt;libconfuse&lt;/em&gt;, mais simplifiée :&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="ini"&gt;&lt;span class="c"&gt;# Comments start with a '#'&lt;/span&gt;

&lt;span class="err"&gt;@include&lt;/span&gt; &lt;span class="err"&gt;"other_file.rc"&lt;/span&gt;

&lt;span class="k"&gt;[section]&lt;/span&gt;
    &lt;span class="na"&gt;option&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"valeur"&lt;/span&gt;
    &lt;span class="na"&gt;option2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;18.2&lt;/span&gt;
        
    &lt;span class="k"&gt;[sous_section] option = true option2 = false [/sous_section]&lt;/span&gt;
&lt;span class="k"&gt;[/section]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les espaces ne sont pas importants, comme vous pouvez le constater. Un fichier de configuration par défaut est fourni dans le dépôt &lt;em&gt;git&lt;/em&gt; (ou installé par votre gestionnaire de paquets, ou via &lt;code&gt;« make install »&lt;/code&gt;, dans « &lt;strong&gt;&lt;code&gt;/etc/xdg/wmfs/wmfsrc&lt;/code&gt;&lt;/strong&gt; »).&lt;/p&gt;

&lt;p&gt;Il est possible de configurer les &lt;em&gt;layouts&lt;/em&gt; voulus, le nombre de &lt;em&gt;tags&lt;/em&gt; voulus et leurs propriétés, les raccourcis clavier et tout ce qui est couleurs, etc..&lt;/p&gt;

&lt;p&gt;Si le fichier « &lt;strong&gt;&lt;code&gt;~/.config/wmfs/status.sh&lt;/code&gt;&lt;/strong&gt; » est présent &lt;strong&gt;et&lt;/strong&gt; exécutable, alors il sera exécuté par WMFS pour remplir la &lt;em&gt;statusbar&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;V. Conclusion&lt;/h3&gt;

&lt;p&gt;WMFS, c’est en premier lieu très léger :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;7 886 lignes de code&lt;/strong&gt; ;&lt;/li&gt;
&lt;li&gt;un exécutable de &lt;strong&gt;203 Kio&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Et en second lieu, simple à installer :&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git://github.com/xorg62/wmfs.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;wmfs
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="c"&gt;# make install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous invite à regarder « &lt;code&gt;./configure --help&lt;/code&gt; » pour plus d’infos. :)&lt;/p&gt;

&lt;p&gt;WMFS, c’est convivial : vous pouvez venir sur le salon &lt;a href="http://fr.wikipedia.org/wiki/IRC" title="Définition Wikipédia"&gt;IRC&lt;/a&gt; (&lt;strong&gt;#wmfs&lt;/strong&gt; @ &lt;strong&gt;irc.freenode.net&lt;/strong&gt;), là où de nombreux utilisateurs vous aideront à commencer avec WMFS. C’est un projet actif en continuel développement, selon moi l’essayer, c’est l’adopter ! :)&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/news/wmfs-window-manager-from-scratch.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/news/wmfs-window-manager-from-scratch#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="Serveurs d'affichage"/>
    <category term="window_manager"/>
    <category term="tiling"/>
    <category term="wm"/>
    <wfw:commentRss>http://linuxfr.org/nodes/85607/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/30985</id>
    <published>2011-04-11T17:35:33+02:00</published>
    <updated>2011-04-11T17:35:33+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/wmfs-window-manager-from-scratch"/>
    <title>WMFS, Window Manager From Scratch</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;h2&gt;WMFS, Window Manager From Scratch&lt;/h2&gt;

&lt;p&gt;WMFS est un gestionnaire de fenêtre dit &lt;strong&gt;tiling&lt;/strong&gt;. Développé par &lt;em&gt;xorg62&lt;/em&gt; (et quelques utilisateurs du logiciel) en C à l'aide de la &lt;strong&gt;&lt;em&gt;XLib&lt;/em&gt;&lt;/strong&gt;, WMFS se distingue des autres &lt;em&gt;tiling window manager&lt;/em&gt; sur de nombreux points.&lt;/p&gt;

&lt;h3&gt;I. Les layouts&lt;/h3&gt;

&lt;p&gt;La est le point fort de tout &lt;em&gt;tiling WM&lt;/em&gt;, les layouts sont les différents modes d'organisations des fenêtres sur votre environnement de travail. En plus des classiques &lt;em&gt;free&lt;/em&gt;, &lt;em&gt;max&lt;/em&gt; et &lt;em&gt;tile&lt;/em&gt; (right, left, bottom, top), on peut utiliser les layouts suivant :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;Grid&lt;/em&gt; : Un simple tableau de NxN fenêtres.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mirror Vertical&lt;/em&gt; : Layout développé pour une utilisation plus aisée de &lt;strong&gt;gimp&lt;/strong&gt;, la fenêtre principale est au centre de l'écran et les fenêtres secondaires sont placées à gauche et à droite.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mirror Horizontal&lt;/em&gt; : De même que le layout &lt;em&gt;Mirror Vertical&lt;/em&gt; sauf que les fenêtres secondaires sont placées au dessus et en dessous de la fenêtre principale.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remarque:&lt;/strong&gt; Un nouveau layout est en cours de développement et sera inspiré du traditionnel &lt;strong&gt;{v}split&lt;/strong&gt; de Vim.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vous connaissez sans doute le layout &lt;em&gt;magnifier&lt;/em&gt; dans awesome, qui permet de placer une fenêtre spécifique au dessus des autres qui sont organisées en tile. WMFS s'inspire de se layout en implémentant le &lt;strong&gt;above_fc&lt;/strong&gt;, une option qui permet de placer le client au dessus des autres et cela dans tout layouts.&lt;/p&gt;

&lt;h3&gt;II. Les tags&lt;/h3&gt;

&lt;p&gt;Comme beaucoup de WM, WMFS gère les &lt;strong&gt;tags&lt;/strong&gt; (bureaux virtuels), ainsi que le &lt;strong&gt;&lt;em&gt;dynamic tagging&lt;/em&gt;&lt;/strong&gt; (ajout/suppression de tags à la volée). Il vous est possible de fusionner plusieurs tags, de définir un layout spécifique aux nouveaux tags, d'échanger deux tags, etc...&lt;/p&gt;

&lt;h3&gt;III. Selbar / Statusbar / Launcher &amp;amp; Systray&lt;/h3&gt;

&lt;p&gt;Dans un WM classique (non tiling) il est utile d'avoir une barre de tâches pour avoir une liste des applications ouvertes. Sous WMFS, on pense que le tiling nous permet d'outre-passer ce besoin (on voit tout ce qui est à l'écran, donc pas besoin). Il a cependant été développé une optiojn bien pratique : la &lt;strong&gt;selbar&lt;/strong&gt;
* Elle permet d'afficher dans l'&lt;em&gt;infobar&lt;/em&gt; de WMFS le titre de la fenêtre ayant le focus.
* On définit dans la configuration les événements souris suivants :
  * L'affichage d'un menu contextuel contenant la liste des clients ouverts (un clic sur l'un d'eux permet de lui donner le focus)
  * De donner le focus au client suivant (dans la liste des clients) ou précédent.&lt;/p&gt;

&lt;p&gt;Vous connaissez peut-être &lt;em&gt;awesome&lt;/em&gt; et son immense souplesse vis-à-vis des informations affichées dans les &lt;em&gt;infobars&lt;/em&gt;. WMFS implémente à peu près la même chose :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wmfs -s [screen number] &amp;lt;message to print in the statusbar&amp;gt;
Example :
$ wmfs -s "hello world"
$ wmfs -s 0 "hello" ; wmfs -s 1 "world"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créez votre programme/script afin d'afficher le résultat des commandes voulues (trafic réseau, usage disque, lecture mpd, etc...) dans l'&lt;em&gt;infobar&lt;/em&gt;. Bien sur, cela n'est pas limité à du texte tel quel. A l'aide de différent format on peut intégrer des images, des couleurs, des progressbar, des graphs, etc...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Remarque:&lt;/strong&gt; Je développe actuellement une bibliothèque C qui permet d'envoyer le nouveau status à WMFS sans passer par &lt;code&gt;wmfs -s&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En dernier point, WMFS possède également (comme la plupart des autres WM) un launcher (prompt dans l'&lt;em&gt;infobar&lt;/em&gt; permettant d’exécuter diverses commandes) et un systray.&lt;/p&gt;

&lt;h3&gt;IV. Une configuration aisée&lt;/h3&gt;

&lt;p&gt;La configuration se fait via le ficher &lt;strong&gt;&lt;code&gt;~/.config/wmfs/wmfsrc&lt;/code&gt;&lt;/strong&gt; mais peut-être découpé en de nombreux fichiers (un par section par exemple) grâce à la fonction &lt;code&gt;@include "/path/to/file/to/include"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La syntaxe est extrêmement simple, le parseur a été développé par &lt;strong&gt;ksh&lt;/strong&gt; basé sur la syntaxe de libconfuse mais simplifié :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Comments start with a '#'

@include "other_file.rc"

[section]
    option  = "valeur"
    option2 = 18.2

    [sous_section] option = true option2 = false [/sous_section]
[/section]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les espaces ne sont pas important comme vous pouvez le constater. Un fichier de configuration par défaut est fourni dans le dépôt git (ou installé par votre gestionnaire de paquet, ou via &lt;code&gt;make install&lt;/code&gt;, dans &lt;strong&gt;&lt;code&gt;/etc/xdg/wmfs/wmfsrc&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;La configuration permet de configurer les layouts voulus, le nombre de tags voulus et leurs propriétés, les raccourcis clavier et tout ce qui est couleurs, etc...&lt;/p&gt;

&lt;p&gt;Si le fichier &lt;strong&gt;&lt;code&gt;~/.config/wmfs/status.sh&lt;/code&gt;&lt;/strong&gt; est présent ET exécutable, alors il sera exécuté par WMFS pour remplir la &lt;em&gt;statusbar&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;V. Conclusion&lt;/h3&gt;

&lt;p&gt;WMFS c'est en premier lieu très léger :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;strong&gt;7886 SLOC&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Un exécutable de &lt;strong&gt;203K&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Et en second lieu simple à installer :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/xorg62/wmfs.git
$ cd wmfs
$ ./configure
$ make
# make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous invite à regarder &lt;code&gt;./configure --help&lt;/code&gt; pour plus d'infos :)&lt;/p&gt;

&lt;p&gt;WMFS c'est convivial, vous pouvez venir sur le salon IRC (&lt;strong&gt;#wmfs&lt;/strong&gt; @ &lt;strong&gt;irc.freenode.net&lt;/strong&gt;) là ou de nombreux utilisateurs vous aiderons à commencer avec WMFS ! C'est un projet actif en continuel développement , selon moi l'essayer c'est l'adopter :)&lt;/p&gt;

&lt;p&gt;Voici quelques liens :&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Le site de WMFS : &lt;a href="http://wmfs.info"&gt;http://wmfs.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github : &lt;a href="http://github.com/xorg62/wmfs"&gt;http://github.com/xorg62/wmfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Un tutoriel WMFS :

&lt;ul&gt;&lt;li&gt;WMFS, acte I : Installation &lt;a href="http://msud.pl/pt"&gt;http://msud.pl/pt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WMFS, acte II : Lancement d’applications à l’ouverture d’une session &lt;a href="http://msud.pl/zw"&gt;http://msud.pl/zw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WMFS, acte III : Les raccourcis claviers &lt;a href="http://msud.pl/q4gE"&gt;http://msud.pl/q4gE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sur le wiki &lt;em&gt;Archlinux&lt;/em&gt; : &lt;a href="https://wiki.archlinux.org/index.php/WMFS"&gt;https://wiki.archlinux.org/index.php/WMFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/wmfs-window-manager-from-scratch.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/wmfs-window-manager-from-scratch#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="wmfs"/>
    <category term="tiling"/>
    <category term="franglais"/>
    <category term="x11"/>
    <category term="manager"/>
    <category term="logicielwmfs"/>
    <category term="window"/>
    <wfw:commentRss>http://linuxfr.org/nodes/85606/comments.atom</wfw:commentRss>
  </entry>
  <entry>
    <id>tag:linuxfr.org,2005:Diary/30983</id>
    <published>2011-04-09T23:27:53+02:00</published>
    <updated>2011-04-10T00:33:53+02:00</updated>
    <link rel="alternate" type="text/html" href="https://linuxfr.org/users/linkdd/journaux/cream-browser"/>
    <title>Cream-Browser</title>
    <rights>Licence CC by-sa http://creativecommons.org/licenses/by-sa/3.0/deed.fr</rights>
    <content type="html">&lt;p&gt;Vous en avez peut-être entendu parler (ou pas). Bref cela ne fait pas de mal de faire une nouvelle présentation n'est-ce pas ?&lt;/p&gt;

&lt;p&gt;Un peu d'histoire ? Oula que non c'est barbant je me contenterai simplement d'énoncer tout cela dans les grandes lignes (pas de dates, je m'en souviens plus exactement).&lt;/p&gt;

&lt;h2&gt;Un petit historique du projet&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;Il y a 1-2 ans : Cream-Browser est un navigateur Internet &lt;strong&gt;vim-like&lt;/strong&gt; développé avec GTK+ et WebKit, la configuration se fait via un fichier de syntaxe INI.&lt;/li&gt;
&lt;li&gt;Il y a 1 ans (et un peu plus) : Grande pause dans le projet.&lt;/li&gt;
&lt;li&gt;Peu après : Cream-Browser reprend, beaucoup de modification dans le code. Notamment une architecture un peu plus modulaire pour pouvoir intégrer différents protocoles autres que ceux gérés par WebKit (je pense à FTP et Gopher, cela n'a jamais abouti). La configuration se fait via la libconfuse (une syntaxe plus souple mais pas trop compliquée pour autant).&lt;/li&gt;
&lt;li&gt;Quelques mois plus tard : Nouvelle pause dans le projet.&lt;/li&gt;
&lt;li&gt;Il y a quelques mois : Reprise du projet à 0. L'ancienne version toujours disponible dans la branche master (les travaux en cours étant dans la branche unstable). Les nouveautés sont :

&lt;ul&gt;&lt;li&gt;Configuration en Lua : langage simple, rapide et beaucoup plus souple. Cream-Browser interagit directement avec Lua qui en altère le fonctionnement et vice-versa. La plupart des fonctionnalités ajoutés  Cream-Browser se retrouve généralement directement dans Lua&lt;/li&gt;
&lt;li&gt;Intégration de GModule : J'expliquerai cela dans la suite de ce journal&lt;/li&gt;
&lt;li&gt;Compatibilité GTK+-3.0 et on tente la portabilité sous Windows (ayeaye je sens le troll :D) grâce à une utilisation massive de la GLib (qui permet de faire à peu près tout).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Pour résumer. Cream-Browser c'est un navigateur Internet (OUI Internet, car je prévois d'intégrer gopher, FTP, SFTP, HTTP, HTTPS, etc. bref cela ne se limitera pas, enfin j'espère, au simple Web).&lt;/p&gt;

&lt;h2&gt;Actuellement&lt;/h2&gt;

&lt;p&gt;Actuellement, Cream-Browser se présente un peu plus comme un framework que dans ses débuts.&lt;/p&gt;

&lt;h3&gt;GModule&lt;/h3&gt;

&lt;p&gt;Avant, lorsque j'intégrais un nouveau protocole, j'y ajoutais donc un widget GTK dans le code qui s'occupait de charger l'URL demandé et d'afficher le contenu (liste des dossiers pour un FTP, la page web pour WebKit, etc.). Bref vous ne voulez pas de Gopher ? dommage on le charge quand même :(&lt;/p&gt;

&lt;p&gt;Maintenant, avec l'intégration de GModule, cela se passe différemment. GModule permet en fait de charger au runtime une bibliothèque (dynamique ou statique, la glib étant portable il peut très bien s'agir d'une dll de Windows, ou de .so/.a sous les UNIX-like). Chaque modules (bibliothèques donc) fournira à Cream-Browser un widget GTK capable de charger l'URL et de l'afficher. Ainsi imaginez donc avoir un module WebKit que vous chargez au lancement de Cream-Browser, vous l'associez au protocole HTTP/HTTPS et vous voila apte à charger toutes URL &lt;code&gt;http://&lt;/code&gt; et &lt;code&gt;https://&lt;/code&gt;. Vous ne souhaitez pas intégrer gopher, il vous suffira de ne pas charger le module.&lt;/p&gt;

&lt;p&gt;Le chargement des modules (et l'association au protocole géré par ce dernier) se fera donc via la configuration en Lua (ne vous inquiétez pas, rien de bien compliqué car la bibliothèque Lua se chargera de cela à votre place bien qu'il ne vous sera pas impossible de le faire vous même).&lt;/p&gt;

&lt;p&gt;Ainsi, celui qui désire utiliser Gecko au lieu de WebKit pourra, à condition qu'il existe un module pour.&lt;br /&gt;
Vous avez sûrement vu sur des sites tels que &lt;code&gt;ubuntu-fr.org&lt;/code&gt; une URL du type &lt;code&gt;apt://paquet&lt;/code&gt;. Si un module existe pour ce protocole, il sera donc possible de l'utiliser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt; Cream-Browser sera toujours développé dans l'optique d'être un navigateur Internet. Développer des modules pour des utilisations autres (terminaux, édition de texte, etc.) le rendra anti-productif. Cream-Browser ne se veut pas un emacs-like (non nous ne sommes pas vendredi donc je m’arrêterai la sur ce point).&lt;/p&gt;

&lt;h3&gt;Lua&lt;/h3&gt;

&lt;p&gt;Comme dit plus haut, la configuration se fera désormais en Lua. Cela permettra une meilleure souplesse du navigateur grâce aux atouts de Lua.&lt;/p&gt;

&lt;p&gt;En effet, dans une précédente version je désirais gérer les &lt;strong&gt;&lt;em&gt;UserAgent dynamiques&lt;/em&gt;&lt;/strong&gt; (associer un UserAgent pour un nom de domaine). Pour se faire j'ai du coder cela en C. C'est désormais faisable directement en Lua !&lt;/p&gt;

&lt;p&gt;Je vise toujours la configuration &lt;strong&gt;simple&lt;/strong&gt; ET &lt;strong&gt;souple&lt;/strong&gt;. Lua n'étant pas compliqué, il suffira de lire le fichier de configuration pour le comprendre aisément, différents exemples de configurations seront postés sur le site.&lt;/p&gt;

&lt;p&gt;Une API C est donc fournie à Lua, API qui sera utilisée par une bibliothèque Lua (&lt;code&gt;require("cream")&lt;/code&gt;). Cream-Browser interagira donc directement avec Lua, et le fonctionnement du script dépendra du fonctionnement de Cream-Browser (et vice-versa). L'évolution (implémentation de nouvelle fonctionnalité, correction de bug...) de l'un entraînera forcément l'évolution de l'autre.&lt;/p&gt;

&lt;h2&gt;Infos supplémentaires&lt;/h2&gt;

&lt;ul&gt;&lt;li&gt;Un canal IRC est ouvert depuis les débuts du projet : &lt;strong&gt;#cream-browser&lt;/strong&gt; @ &lt;strong&gt;irc.freenode.net&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Le site Internet est disponible à l'adresse suivante : &lt;a href="http://cream-browser.net"&gt;http://cream-browser.net&lt;/a&gt; (amené à subir pas mal de changement dans les temps qui viennent).&lt;/li&gt;
&lt;li&gt;Lien sur github : &lt;a href="http://github.com/linkdd/cream-browser"&gt;http://github.com/linkdd/cream-browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/cream-browser.epub"&gt;Télécharger ce contenu au format Epub&lt;/a&gt;&lt;/div&gt;    &lt;p&gt;&lt;a href="https://linuxfr.org/users/linkdd/journaux/cream-browser#comments"&gt;Lire les commentaires&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>David Delassus</name>
    </author>
    <category term="browser"/>
    <category term="vim"/>
    <category term="lua"/>
    <category term="creambrowser"/>
    <category term="webkit"/>
    <category term="gtk3"/>
    <category term="gtk"/>
    <wfw:commentRss>http://linuxfr.org/nodes/85594/comments.atom</wfw:commentRss>
  </entry>
</feed>
